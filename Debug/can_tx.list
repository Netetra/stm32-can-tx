
can_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004654  08004654  00005654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004714  08004714  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004714  08004714  00005714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800471c  0800471c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004720  08004720  00005720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004724  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000248  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b0  200002b0  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad88  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001911  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  00012738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063f  00000000  00000000  00012f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b750  00000000  00000000  000135af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a182  00000000  00000000  0002ecff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009efaa  00000000  00000000  00038e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7e2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002908  00000000  00000000  000d7e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  000da778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800463c 	.word	0x0800463c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800463c 	.word	0x0800463c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
static void MX_USART2_UART_Init(void);
void TxHerader_Init();

int main() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  setbuf(stdout, NULL);
 8000276:	4b3e      	ldr	r3, [pc, #248]	@ (8000370 <main+0x100>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f003 fabc 	bl	80037fc <setbuf>
  HAL_Init();
 8000284:	f000 fb5c 	bl	8000940 <HAL_Init>
  SystemClock_Config();
 8000288:	f000 f8be 	bl	8000408 <SystemClock_Config>
  MX_GPIO_Init();
 800028c:	f000 f964 	bl	8000558 <MX_GPIO_Init>
  MX_CAN_Init();
 8000290:	f000 f8fc 	bl	800048c <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000294:	f000 f930 	bl	80004f8 <MX_USART2_UART_Init>
  TxHeader_Init();
 8000298:	f000 f888 	bl	80003ac <TxHeader_Init>

  printf("Start CAN Tx\r\n");
 800029c:	4835      	ldr	r0, [pc, #212]	@ (8000374 <main+0x104>)
 800029e:	f003 faa5 	bl	80037ec <puts>
  HAL_CAN_Start(&hcan);
 80002a2:	4835      	ldr	r0, [pc, #212]	@ (8000378 <main+0x108>)
 80002a4:	f000 fcd1 	bl	8000c4a <HAL_CAN_Start>

  while (true) {
	  HAL_Delay(500);
 80002a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002ac:	f000 fbae 	bl	8000a0c <HAL_Delay>

	  txMailBoxesFreeLevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80002b0:	4831      	ldr	r0, [pc, #196]	@ (8000378 <main+0x108>)
 80002b2:	f000 fdde 	bl	8000e72 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a30      	ldr	r2, [pc, #192]	@ (800037c <main+0x10c>)
 80002ba:	6013      	str	r3, [r2, #0]
	  printf("FreeLevel: %d\r\n", txMailBoxesFreeLevel);
 80002bc:	4b2f      	ldr	r3, [pc, #188]	@ (800037c <main+0x10c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4619      	mov	r1, r3
 80002c2:	482f      	ldr	r0, [pc, #188]	@ (8000380 <main+0x110>)
 80002c4:	f003 fa2a 	bl	800371c <iprintf>

	  if(txMailBoxesFreeLevel == 0) {
 80002c8:	4b2c      	ldr	r3, [pc, #176]	@ (800037c <main+0x10c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d04d      	beq.n	800036c <main+0xfc>
		  continue;
	  }

	  count++;
 80002d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000384 <main+0x114>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000384 <main+0x114>)
 80002d8:	6013      	str	r3, [r2, #0]
	  for (uint8_t i = 0; i < 4; i++) {
 80002da:	2300      	movs	r3, #0
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	e015      	b.n	800030c <main+0x9c>
		  TxData[i] = (count >> (24 - 8 * i)) & 0xFF;
 80002e0:	4b28      	ldr	r3, [pc, #160]	@ (8000384 <main+0x114>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f1c3 0303 	rsb	r3, r3, #3
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	40da      	lsrs	r2, r3
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	b2d1      	uxtb	r1, r2
 80002f2:	4a25      	ldr	r2, [pc, #148]	@ (8000388 <main+0x118>)
 80002f4:	54d1      	strb	r1, [r2, r3]
		  printf("TxData[%d]: %#x ", i, TxData[i]);
 80002f6:	79f9      	ldrb	r1, [r7, #7]
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	4a23      	ldr	r2, [pc, #140]	@ (8000388 <main+0x118>)
 80002fc:	5cd3      	ldrb	r3, [r2, r3]
 80002fe:	461a      	mov	r2, r3
 8000300:	4822      	ldr	r0, [pc, #136]	@ (800038c <main+0x11c>)
 8000302:	f003 fa0b 	bl	800371c <iprintf>
	  for (uint8_t i = 0; i < 4; i++) {
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	3301      	adds	r3, #1
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	2b03      	cmp	r3, #3
 8000310:	d9e6      	bls.n	80002e0 <main+0x70>
	  }
	  printf("\r\n");
 8000312:	481f      	ldr	r0, [pc, #124]	@ (8000390 <main+0x120>)
 8000314:	f003 fa6a 	bl	80037ec <puts>

	  printf("Send: %d\r\n", count);
 8000318:	4b1a      	ldr	r3, [pc, #104]	@ (8000384 <main+0x114>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4619      	mov	r1, r3
 800031e:	481d      	ldr	r0, [pc, #116]	@ (8000394 <main+0x124>)
 8000320:	f003 f9fc 	bl	800371c <iprintf>
	  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000324:	4b1c      	ldr	r3, [pc, #112]	@ (8000398 <main+0x128>)
 8000326:	4a18      	ldr	r2, [pc, #96]	@ (8000388 <main+0x118>)
 8000328:	491c      	ldr	r1, [pc, #112]	@ (800039c <main+0x12c>)
 800032a:	4813      	ldr	r0, [pc, #76]	@ (8000378 <main+0x108>)
 800032c:	f000 fcd1 	bl	8000cd2 <HAL_CAN_AddTxMessage>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d002      	beq.n	800033c <main+0xcc>
		  printf("Sending Error!");
 8000336:	481a      	ldr	r0, [pc, #104]	@ (80003a0 <main+0x130>)
 8000338:	f003 f9f0 	bl	800371c <iprintf>
	  }

	  if (count % 3 == 0) {
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <main+0x114>)
 800033e:	6819      	ldr	r1, [r3, #0]
 8000340:	4b18      	ldr	r3, [pc, #96]	@ (80003a4 <main+0x134>)
 8000342:	fba3 2301 	umull	r2, r3, r3, r1
 8000346:	085a      	lsrs	r2, r3, #1
 8000348:	4613      	mov	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	4413      	add	r3, r2
 800034e:	1aca      	subs	r2, r1, r3
 8000350:	2a00      	cmp	r2, #0
 8000352:	d105      	bne.n	8000360 <main+0xf0>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2108      	movs	r1, #8
 8000358:	4813      	ldr	r0, [pc, #76]	@ (80003a8 <main+0x138>)
 800035a:	f001 fa7d 	bl	8001858 <HAL_GPIO_WritePin>
 800035e:	e7a3      	b.n	80002a8 <main+0x38>
	  } else {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2108      	movs	r1, #8
 8000364:	4810      	ldr	r0, [pc, #64]	@ (80003a8 <main+0x138>)
 8000366:	f001 fa77 	bl	8001858 <HAL_GPIO_WritePin>
 800036a:	e79d      	b.n	80002a8 <main+0x38>
		  continue;
 800036c:	bf00      	nop
	  HAL_Delay(500);
 800036e:	e79b      	b.n	80002a8 <main+0x38>
 8000370:	20000018 	.word	0x20000018
 8000374:	08004654 	.word	0x08004654
 8000378:	20000084 	.word	0x20000084
 800037c:	20000154 	.word	0x20000154
 8000380:	08004664 	.word	0x08004664
 8000384:	20000158 	.word	0x20000158
 8000388:	20000150 	.word	0x20000150
 800038c:	08004674 	.word	0x08004674
 8000390:	08004688 	.word	0x08004688
 8000394:	0800468c 	.word	0x0800468c
 8000398:	2000014c 	.word	0x2000014c
 800039c:	20000134 	.word	0x20000134
 80003a0:	08004698 	.word	0x08004698
 80003a4:	aaaaaaab 	.word	0xaaaaaaab
 80003a8:	48000400 	.word	0x48000400

080003ac <TxHeader_Init>:
	  }
  }
}

void TxHeader_Init() {
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  TxHeader.StdId = 0x555;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	@ (80003dc <TxHeader_Init+0x30>)
 80003b2:	f240 5255 	movw	r2, #1365	@ 0x555
 80003b6:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80003b8:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <TxHeader_Init+0x30>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80003be:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <TxHeader_Init+0x30>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80003c4:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <TxHeader_Init+0x30>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80003ca:	4b04      	ldr	r3, [pc, #16]	@ (80003dc <TxHeader_Init+0x30>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	751a      	strb	r2, [r3, #20]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000134 	.word	0x20000134

080003e0 <_write>:

int _write(int file, char *ptr, int len) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	230a      	movs	r3, #10
 80003f2:	68b9      	ldr	r1, [r7, #8]
 80003f4:	4803      	ldr	r0, [pc, #12]	@ (8000404 <_write+0x24>)
 80003f6:	f002 fcf3 	bl	8002de0 <HAL_UART_Transmit>
  return len;
 80003fa:	687b      	ldr	r3, [r7, #4]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200000ac 	.word	0x200000ac

08000408 <SystemClock_Config>:

/** ここから下は自動生成されたコードなので無視でOK */

void SystemClock_Config() {
 8000408:	b580      	push	{r7, lr}
 800040a:	b090      	sub	sp, #64	@ 0x40
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	2228      	movs	r2, #40	@ 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f003 fb84 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042a:	2302      	movs	r3, #2
 800042c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042e:	2301      	movs	r3, #1
 8000430:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000432:	2310      	movs	r3, #16
 8000434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043a:	2300      	movs	r3, #0
 800043c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800043e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000442:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000444:	f107 0318 	add.w	r3, r7, #24
 8000448:	4618      	mov	r0, r3
 800044a:	f001 fa1d 	bl	8001888 <HAL_RCC_OscConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x50>
    Error_Handler();
 8000454:	f000 f8be 	bl	80005d4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	230f      	movs	r3, #15
 800045a:	607b      	str	r3, [r7, #4]
                              | RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045c:	2302      	movs	r3, #2
 800045e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2102      	movs	r1, #2
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fa46 	bl	8002904 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x7a>
    Error_Handler();
 800047e:	f000 f8a9 	bl	80005d4 <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3740      	adds	r7, #64	@ 0x40
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_CAN_Init>:

static void MX_CAN_Init() {
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  hcan.Instance = CAN;
 8000490:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <MX_CAN_Init+0x64>)
 8000492:	4a18      	ldr	r2, [pc, #96]	@ (80004f4 <MX_CAN_Init+0x68>)
 8000494:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000496:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <MX_CAN_Init+0x64>)
 8000498:	2204      	movs	r2, #4
 800049a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <MX_CAN_Init+0x64>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004aa:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80004ae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004b2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80004b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004b8:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004c4:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80004dc:	4804      	ldr	r0, [pc, #16]	@ (80004f0 <MX_CAN_Init+0x64>)
 80004de:	f000 fab9 	bl	8000a54 <HAL_CAN_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_CAN_Init+0x60>
    Error_Handler();
 80004e8:	f000 f874 	bl	80005d4 <Error_Handler>
  }
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000084 	.word	0x20000084
 80004f4:	40006400 	.word	0x40006400

080004f8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init() {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80004fc:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 80004fe:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <MX_USART2_UART_Init+0x5c>)
 8000500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000502:	4b13      	ldr	r3, [pc, #76]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000504:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_UART_Init(&huart2) != HAL_OK) {
 800053a:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800053c:	f002 fc02 	bl	8002d44 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USART2_UART_Init+0x52>
    Error_Handler();
 8000546:	f000 f845 	bl	80005d4 <Error_Handler>
  }
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000ac 	.word	0x200000ac
 8000554:	40004400 	.word	0x40004400

08000558 <MX_GPIO_Init>:

static void MX_GPIO_Init() {
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <MX_GPIO_Init+0x74>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a16      	ldr	r2, [pc, #88]	@ (80005cc <MX_GPIO_Init+0x74>)
 8000574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_GPIO_Init+0x74>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_GPIO_Init+0x74>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a10      	ldr	r2, [pc, #64]	@ (80005cc <MX_GPIO_Init+0x74>)
 800058c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_GPIO_Init+0x74>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2108      	movs	r1, #8
 80005a2:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <MX_GPIO_Init+0x78>)
 80005a4:	f001 f958 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005a8:	2308      	movs	r3, #8
 80005aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <MX_GPIO_Init+0x78>)
 80005c0:	f000 ffd8 	bl	8001574 <HAL_GPIO_Init>
}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000400 	.word	0x48000400

080005d4 <Error_Handler>:

void Error_Handler() {
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  __disable_irq();
  while (true) {}
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <Error_Handler+0x8>

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_MspInit+0x44>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <HAL_MspInit+0x44>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_MspInit+0x44>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <HAL_MspInit+0x44>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <HAL_MspInit+0x44>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000608:	61d3      	str	r3, [r2, #28]
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <HAL_MspInit+0x44>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1c      	ldr	r2, [pc, #112]	@ (80006b8 <HAL_CAN_MspInit+0x90>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d131      	bne.n	80006ae <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800064a:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <HAL_CAN_MspInit+0x94>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a1b      	ldr	r2, [pc, #108]	@ (80006bc <HAL_CAN_MspInit+0x94>)
 8000650:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <HAL_CAN_MspInit+0x94>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <HAL_CAN_MspInit+0x94>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a15      	ldr	r2, [pc, #84]	@ (80006bc <HAL_CAN_MspInit+0x94>)
 8000668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <HAL_CAN_MspInit+0x94>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800067a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800067e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800068c:	2309      	movs	r3, #9
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f000 ff6b 	bl	8001574 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2014      	movs	r0, #20
 80006a4:	f000 ff2f 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80006a8:	2014      	movs	r0, #20
 80006aa:	f000 ff48 	bl	800153e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	@ 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40006400 	.word	0x40006400
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a17      	ldr	r2, [pc, #92]	@ (800073c <HAL_UART_MspInit+0x7c>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d128      	bne.n	8000734 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e2:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <HAL_UART_MspInit+0x80>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a16      	ldr	r2, [pc, #88]	@ (8000740 <HAL_UART_MspInit+0x80>)
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <HAL_UART_MspInit+0x80>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <HAL_UART_MspInit+0x80>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <HAL_UART_MspInit+0x80>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_UART_MspInit+0x80>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000712:	230c      	movs	r3, #12
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000722:	2307      	movs	r3, #7
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000730:	f000 ff20 	bl	8001574 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	@ 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40004400 	.word	0x40004400
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <NMI_Handler+0x4>

0800074c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <MemManage_Handler+0x4>

0800075c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <UsageFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079a:	f000 f917 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007a8:	4802      	ldr	r0, [pc, #8]	@ (80007b4 <CAN_RX0_IRQHandler+0x10>)
 80007aa:	f000 fb97 	bl	8000edc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000084 	.word	0x20000084

080007b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00a      	b.n	80007e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ca:	f3af 8000 	nop.w
 80007ce:	4601      	mov	r1, r0
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	60ba      	str	r2, [r7, #8]
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf0      	blt.n	80007ca <_read+0x12>
  }

  return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800081a:	605a      	str	r2, [r3, #4]
  return 0;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <_isatty>:

int _isatty(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f003 f998 	bl	8003bc0 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20003000 	.word	0x20003000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	2000015c 	.word	0x2000015c
 80008c4:	200002b0 	.word	0x200002b0

080008c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000924 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f0:	f7ff ffea 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	@ (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	@ (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091a:	f003 f957 	bl	8003bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091e:	f7ff fca7 	bl	8000270 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000924:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000930:	08004724 	.word	0x08004724
  ldr r2, =_sbss
 8000934:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000938:	200002b0 	.word	0x200002b0

0800093c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_2_IRQHandler>
	...

08000940 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_Init+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <HAL_Init+0x28>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 fdcd 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fe40 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fde5 	bl	800155a <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009a8:	f000 fdad 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000160 	.word	0x20000160

080009f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000160 	.word	0x20000160

08000a0c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff ffee 	bl	80009f4 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffde 	bl	80009f4 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008

08000a54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e0ed      	b.n	8000c42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fdd8 	bl	8000628 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 0201 	orr.w	r2, r2, #1
 8000a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a88:	f7ff ffb4 	bl	80009f4 <HAL_GetTick>
 8000a8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a8e:	e012      	b.n	8000ab6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a90:	f7ff ffb0 	bl	80009f4 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	2b0a      	cmp	r3, #10
 8000a9c:	d90b      	bls.n	8000ab6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2205      	movs	r2, #5
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e0c5      	b.n	8000c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0e5      	beq.n	8000a90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 0202 	bic.w	r2, r2, #2
 8000ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ad4:	f7ff ff8e 	bl	80009f4 <HAL_GetTick>
 8000ad8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ada:	e012      	b.n	8000b02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000adc:	f7ff ff8a 	bl	80009f4 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b0a      	cmp	r3, #10
 8000ae8:	d90b      	bls.n	8000b02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2205      	movs	r2, #5
 8000afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e09f      	b.n	8000c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1e5      	bne.n	8000adc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7e1b      	ldrb	r3, [r3, #24]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d108      	bne.n	8000b2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e007      	b.n	8000b3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d108      	bne.n	8000b54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e007      	b.n	8000b64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7e9b      	ldrb	r3, [r3, #26]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d108      	bne.n	8000b7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f042 0220 	orr.w	r2, r2, #32
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	e007      	b.n	8000b8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 0220 	bic.w	r2, r2, #32
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7edb      	ldrb	r3, [r3, #27]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d108      	bne.n	8000ba8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0210 	bic.w	r2, r2, #16
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0210 	orr.w	r2, r2, #16
 8000bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7f1b      	ldrb	r3, [r3, #28]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d108      	bne.n	8000bd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0208 	orr.w	r2, r2, #8
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e007      	b.n	8000be2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0208 	bic.w	r2, r2, #8
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7f5b      	ldrb	r3, [r3, #29]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d108      	bne.n	8000bfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f042 0204 	orr.w	r2, r2, #4
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	e007      	b.n	8000c0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0204 	bic.w	r2, r2, #4
 8000c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	431a      	orrs	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	ea42 0103 	orr.w	r1, r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	1e5a      	subs	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d12e      	bne.n	8000cbc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2202      	movs	r2, #2
 8000c62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 0201 	bic.w	r2, r2, #1
 8000c74:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c76:	f7ff febd 	bl	80009f4 <HAL_GetTick>
 8000c7a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c7c:	e012      	b.n	8000ca4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c7e:	f7ff feb9 	bl	80009f4 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b0a      	cmp	r3, #10
 8000c8a:	d90b      	bls.n	8000ca4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c90:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2205      	movs	r2, #5
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e012      	b.n	8000cca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1e5      	bne.n	8000c7e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e006      	b.n	8000cca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
  }
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b089      	sub	sp, #36	@ 0x24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cf0:	7ffb      	ldrb	r3, [r7, #31]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d003      	beq.n	8000cfe <HAL_CAN_AddTxMessage+0x2c>
 8000cf6:	7ffb      	ldrb	r3, [r7, #31]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	f040 80ad 	bne.w	8000e58 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10a      	bne.n	8000d1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 8095 	beq.w	8000e48 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	0e1b      	lsrs	r3, r3, #24
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10d      	bne.n	8000d56 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d44:	68f9      	ldr	r1, [r7, #12]
 8000d46:	6809      	ldr	r1, [r1, #0]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3318      	adds	r3, #24
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	440b      	add	r3, r1
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	e00f      	b.n	8000d76 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d66:	68f9      	ldr	r1, [r7, #12]
 8000d68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3318      	adds	r3, #24
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	440b      	add	r3, r1
 8000d74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6819      	ldr	r1, [r3, #0]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3318      	adds	r3, #24
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	440b      	add	r3, r1
 8000d86:	3304      	adds	r3, #4
 8000d88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	7d1b      	ldrb	r3, [r3, #20]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d111      	bne.n	8000db6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3318      	adds	r3, #24
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3304      	adds	r3, #4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	6811      	ldr	r1, [r2, #0]
 8000da6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3318      	adds	r3, #24
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	440b      	add	r3, r1
 8000db2:	3304      	adds	r3, #4
 8000db4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3307      	adds	r3, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	061a      	lsls	r2, r3, #24
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3306      	adds	r3, #6
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	041b      	lsls	r3, r3, #16
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3305      	adds	r3, #5
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	3204      	adds	r2, #4
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	4610      	mov	r0, r2
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	6811      	ldr	r1, [r2, #0]
 8000dde:	ea43 0200 	orr.w	r2, r3, r0
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	440b      	add	r3, r1
 8000de8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000dec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3303      	adds	r3, #3
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	061a      	lsls	r2, r3, #24
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3302      	adds	r3, #2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3301      	adds	r3, #1
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	4610      	mov	r0, r2
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	6811      	ldr	r1, [r2, #0]
 8000e14:	ea43 0200 	orr.w	r2, r3, r0
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	440b      	add	r3, r1
 8000e1e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3318      	adds	r3, #24
 8000e2c:	011b      	lsls	r3, r3, #4
 8000e2e:	4413      	add	r3, r2
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	6811      	ldr	r1, [r2, #0]
 8000e36:	f043 0201 	orr.w	r2, r3, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3318      	adds	r3, #24
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	440b      	add	r3, r1
 8000e42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e00e      	b.n	8000e66 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e006      	b.n	8000e66 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
  }
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	@ 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b085      	sub	sp, #20
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e84:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e86:	7afb      	ldrb	r3, [r7, #11]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d002      	beq.n	8000e92 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000e8c:	7afb      	ldrb	r3, [r7, #11]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d11d      	bne.n	8000ece <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d07c      	beq.n	800101c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d023      	beq.n	8000f74 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f983 	bl	800124a <HAL_CAN_TxMailbox0CompleteCallback>
 8000f44:	e016      	b.n	8000f74 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d004      	beq.n	8000f5a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f58:	e00c      	b.n	8000f74 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f6c:	e002      	b.n	8000f74 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f989 	bl	8001286 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d024      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f963 	bl	800125e <HAL_CAN_TxMailbox1CompleteCallback>
 8000f98:	e016      	b.n	8000fc8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fac:	e00c      	b.n	8000fc8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc0:	e002      	b.n	8000fc8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f969 	bl	800129a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d024      	beq.n	800101c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f943 	bl	8001272 <HAL_CAN_TxMailbox2CompleteCallback>
 8000fec:	e016      	b.n	800101c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001000:	e00c      	b.n	800101c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
 8001014:	e002      	b.n	800101c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f949 	bl	80012ae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00c      	beq.n	8001040 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2210      	movs	r2, #16
 800103e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001040:	6a3b      	ldr	r3, [r7, #32]
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2208      	movs	r2, #8
 800105a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f93a 	bl	80012d6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d009      	beq.n	8001080 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f921 	bl	80012c2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00c      	beq.n	80010a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	2b00      	cmp	r3, #0
 8001092:	d007      	beq.n	80010a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2210      	movs	r2, #16
 80010a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00b      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2208      	movs	r2, #8
 80010be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f91c 	bl	80012fe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f903 	bl	80012ea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00b      	beq.n	8001106 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2210      	movs	r2, #16
 80010fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f906 	bl	8001312 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00b      	beq.n	8001128 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2208      	movs	r2, #8
 8001120:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f8ff 	bl	8001326 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d07b      	beq.n	800122a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d072      	beq.n	8001222 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117a:	2b00      	cmp	r3, #0
 800117c:	d008      	beq.n	8001190 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001196:	2b00      	cmp	r3, #0
 8001198:	d043      	beq.n	8001222 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d03e      	beq.n	8001222 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80011aa:	2b60      	cmp	r3, #96	@ 0x60
 80011ac:	d02b      	beq.n	8001206 <HAL_CAN_IRQHandler+0x32a>
 80011ae:	2b60      	cmp	r3, #96	@ 0x60
 80011b0:	d82e      	bhi.n	8001210 <HAL_CAN_IRQHandler+0x334>
 80011b2:	2b50      	cmp	r3, #80	@ 0x50
 80011b4:	d022      	beq.n	80011fc <HAL_CAN_IRQHandler+0x320>
 80011b6:	2b50      	cmp	r3, #80	@ 0x50
 80011b8:	d82a      	bhi.n	8001210 <HAL_CAN_IRQHandler+0x334>
 80011ba:	2b40      	cmp	r3, #64	@ 0x40
 80011bc:	d019      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x316>
 80011be:	2b40      	cmp	r3, #64	@ 0x40
 80011c0:	d826      	bhi.n	8001210 <HAL_CAN_IRQHandler+0x334>
 80011c2:	2b30      	cmp	r3, #48	@ 0x30
 80011c4:	d010      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x30c>
 80011c6:	2b30      	cmp	r3, #48	@ 0x30
 80011c8:	d822      	bhi.n	8001210 <HAL_CAN_IRQHandler+0x334>
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	d002      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x2f8>
 80011ce:	2b20      	cmp	r3, #32
 80011d0:	d005      	beq.n	80011de <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80011d2:	e01d      	b.n	8001210 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80011d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011dc:	e019      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011e6:	e014      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ea:	f043 0320 	orr.w	r3, r3, #32
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011f0:	e00f      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80011f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011fa:	e00a      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001204:	e005      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800120e:	e000      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            break;
 8001210:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001220:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2204      	movs	r2, #4
 8001228:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f87c 	bl	800133a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	@ (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	@ (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff29 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff3e 	bl	8001398 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff31 	bl	80013b4 <__NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffa2 	bl	80014ac <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001582:	e14e      	b.n	8001822 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2101      	movs	r1, #1
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8140 	beq.w	800181c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d005      	beq.n	80015b4 <HAL_GPIO_Init+0x40>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d130      	bne.n	8001616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ea:	2201      	movs	r2, #1
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f003 0201 	and.w	r2, r3, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b03      	cmp	r3, #3
 8001620:	d017      	beq.n	8001652 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d123      	bne.n	80016a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	08da      	lsrs	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3208      	adds	r2, #8
 80016a0:	6939      	ldr	r1, [r7, #16]
 80016a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0203 	and.w	r2, r3, #3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e8:	4b55      	ldr	r3, [pc, #340]	@ (8001840 <HAL_GPIO_Init+0x2cc>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a54      	ldr	r2, [pc, #336]	@ (8001840 <HAL_GPIO_Init+0x2cc>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b52      	ldr	r3, [pc, #328]	@ (8001840 <HAL_GPIO_Init+0x2cc>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001700:	4a50      	ldr	r2, [pc, #320]	@ (8001844 <HAL_GPIO_Init+0x2d0>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	220f      	movs	r2, #15
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800172a:	d013      	beq.n	8001754 <HAL_GPIO_Init+0x1e0>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a46      	ldr	r2, [pc, #280]	@ (8001848 <HAL_GPIO_Init+0x2d4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d00d      	beq.n	8001750 <HAL_GPIO_Init+0x1dc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a45      	ldr	r2, [pc, #276]	@ (800184c <HAL_GPIO_Init+0x2d8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d007      	beq.n	800174c <HAL_GPIO_Init+0x1d8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a44      	ldr	r2, [pc, #272]	@ (8001850 <HAL_GPIO_Init+0x2dc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d101      	bne.n	8001748 <HAL_GPIO_Init+0x1d4>
 8001744:	2303      	movs	r3, #3
 8001746:	e006      	b.n	8001756 <HAL_GPIO_Init+0x1e2>
 8001748:	2305      	movs	r3, #5
 800174a:	e004      	b.n	8001756 <HAL_GPIO_Init+0x1e2>
 800174c:	2302      	movs	r3, #2
 800174e:	e002      	b.n	8001756 <HAL_GPIO_Init+0x1e2>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_GPIO_Init+0x1e2>
 8001754:	2300      	movs	r3, #0
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	f002 0203 	and.w	r2, r2, #3
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	4093      	lsls	r3, r2
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001766:	4937      	ldr	r1, [pc, #220]	@ (8001844 <HAL_GPIO_Init+0x2d0>)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <HAL_GPIO_Init+0x2e0>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001798:	4a2e      	ldr	r2, [pc, #184]	@ (8001854 <HAL_GPIO_Init+0x2e0>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800179e:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <HAL_GPIO_Init+0x2e0>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017c2:	4a24      	ldr	r2, [pc, #144]	@ (8001854 <HAL_GPIO_Init+0x2e0>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c8:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <HAL_GPIO_Init+0x2e0>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <HAL_GPIO_Init+0x2e0>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f2:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_GPIO_Init+0x2e0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001816:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <HAL_GPIO_Init+0x2e0>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	f47f aea9 	bne.w	8001584 <HAL_GPIO_Init+0x10>
  }
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000
 8001848:	48000400 	.word	0x48000400
 800184c:	48000800 	.word	0x48000800
 8001850:	48000c00 	.word	0x48000c00
 8001854:	40010400 	.word	0x40010400

08001858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
 8001864:	4613      	mov	r3, r2
 8001866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001868:	787b      	ldrb	r3, [r7, #1]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001874:	e002      	b.n	800187c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800188e:	af00      	add	r7, sp, #0
 8001890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001894:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001898:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800189a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f001 b823 	b.w	80028f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 817d 	beq.w	8001bbe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018c4:	4bbc      	ldr	r3, [pc, #752]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d00c      	beq.n	80018ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018d0:	4bb9      	ldr	r3, [pc, #740]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d15c      	bne.n	8001996 <HAL_RCC_OscConfig+0x10e>
 80018dc:	4bb6      	ldr	r3, [pc, #728]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e8:	d155      	bne.n	8001996 <HAL_RCC_OscConfig+0x10e>
 80018ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018ee:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	095b      	lsrs	r3, r3, #5
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d102      	bne.n	800191c <HAL_RCC_OscConfig+0x94>
 8001916:	4ba8      	ldr	r3, [pc, #672]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	e015      	b.n	8001948 <HAL_RCC_OscConfig+0xc0>
 800191c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001920:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001930:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001934:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001938:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001944:	4b9c      	ldr	r3, [pc, #624]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800194c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001950:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001954:	fa92 f2a2 	rbit	r2, r2
 8001958:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800195c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001960:	fab2 f282 	clz	r2, r2
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f042 0220 	orr.w	r2, r2, #32
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f002 021f 	and.w	r2, r2, #31
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 811f 	beq.w	8001bbc <HAL_RCC_OscConfig+0x334>
 800197e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001982:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 8116 	bne.w	8001bbc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	f000 bfaf 	b.w	80028f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12e>
 80019a8:	4b83      	ldr	r3, [pc, #524]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a82      	ldr	r2, [pc, #520]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e036      	b.n	8001a24 <HAL_RCC_OscConfig+0x19c>
 80019b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x158>
 80019c6:	4b7c      	ldr	r3, [pc, #496]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a7b      	ldr	r2, [pc, #492]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80019cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b79      	ldr	r3, [pc, #484]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a78      	ldr	r2, [pc, #480]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80019d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e021      	b.n	8001a24 <HAL_RCC_OscConfig+0x19c>
 80019e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x184>
 80019f2:	4b71      	ldr	r3, [pc, #452]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a70      	ldr	r2, [pc, #448]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b6e      	ldr	r3, [pc, #440]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6d      	ldr	r2, [pc, #436]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0x19c>
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a69      	ldr	r2, [pc, #420]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b67      	ldr	r3, [pc, #412]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a66      	ldr	r2, [pc, #408]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a24:	4b64      	ldr	r3, [pc, #400]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a28:	f023 020f 	bic.w	r2, r3, #15
 8001a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	495f      	ldr	r1, [pc, #380]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d059      	beq.n	8001b02 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7fe ffd1 	bl	80009f4 <HAL_GetTick>
 8001a52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7fe ffcc 	bl	80009f4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	@ 0x64
 8001a66:	d902      	bls.n	8001a6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	f000 bf43 	b.w	80028f4 <HAL_RCC_OscConfig+0x106c>
 8001a6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a72:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001a82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x218>
 8001a9a:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e015      	b.n	8001acc <HAL_RCC_OscConfig+0x244>
 8001aa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001abc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ad0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001ad4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ad8:	fa92 f2a2 	rbit	r2, r2
 8001adc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ae0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f002 021f 	and.w	r2, r2, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ab      	beq.n	8001a58 <HAL_RCC_OscConfig+0x1d0>
 8001b00:	e05d      	b.n	8001bbe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7fe ff77 	bl	80009f4 <HAL_GetTick>
 8001b06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7fe ff72 	bl	80009f4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b64      	cmp	r3, #100	@ 0x64
 8001b1a:	d902      	bls.n	8001b22 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	f000 bee9 	b.w	80028f4 <HAL_RCC_OscConfig+0x106c>
 8001b22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b26:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001b36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d102      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2cc>
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	e015      	b.n	8001b80 <HAL_RCC_OscConfig+0x2f8>
 8001b54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b58:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001b68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001b70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b84:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001b88:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001b8c:	fa92 f2a2 	rbit	r2, r2
 8001b90:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001b94:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001b98:	fab2 f282 	clz	r2, r2
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f002 021f 	and.w	r2, r2, #31
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ab      	bne.n	8001b0c <HAL_RCC_OscConfig+0x284>
 8001bb4:	e003      	b.n	8001bbe <HAL_RCC_OscConfig+0x336>
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 817d 	beq.w	8001ece <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bd4:	4ba6      	ldr	r3, [pc, #664]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001be0:	4ba3      	ldr	r3, [pc, #652]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d172      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x44a>
 8001bec:	4ba0      	ldr	r3, [pc, #640]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d16c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x44a>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001c0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	095b      	lsrs	r3, r3, #5
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d102      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3a0>
 8001c22:	4b93      	ldr	r3, [pc, #588]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	e013      	b.n	8001c50 <HAL_RCC_OscConfig+0x3c8>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c40:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001c4c:	4b88      	ldr	r3, [pc, #544]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	2202      	movs	r2, #2
 8001c52:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001c56:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c5a:	fa92 f2a2 	rbit	r2, r2
 8001c5e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001c62:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001c66:	fab2 f282 	clz	r2, r2
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f042 0220 	orr.w	r2, r2, #32
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f002 021f 	and.w	r2, r2, #31
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <HAL_RCC_OscConfig+0x410>
 8001c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d002      	beq.n	8001c98 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f000 be2e 	b.w	80028f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b75      	ldr	r3, [pc, #468]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	21f8      	movs	r1, #248	@ 0xf8
 8001cae:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001cb6:	fa91 f1a1 	rbit	r1, r1
 8001cba:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001cbe:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001cc2:	fab1 f181 	clz	r1, r1
 8001cc6:	b2c9      	uxtb	r1, r1
 8001cc8:	408b      	lsls	r3, r1
 8001cca:	4969      	ldr	r1, [pc, #420]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd0:	e0fd      	b.n	8001ece <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8088 	beq.w	8001df4 <HAL_RCC_OscConfig+0x56c>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001cf6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7fe fe70 	bl	80009f4 <HAL_GetTick>
 8001d14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7fe fe6b 	bl	80009f4 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d902      	bls.n	8001d30 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	f000 bde2 	b.w	80028f4 <HAL_RCC_OscConfig+0x106c>
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001d42:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4d8>
 8001d5a:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e013      	b.n	8001d88 <HAL_RCC_OscConfig+0x500>
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d72:	2302      	movs	r3, #2
 8001d74:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001d78:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d84:	4b3a      	ldr	r3, [pc, #232]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001d92:	fa92 f2a2 	rbit	r2, r2
 8001d96:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001d9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0af      	beq.n	8001d1a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	21f8      	movs	r1, #248	@ 0xf8
 8001dd0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001dd8:	fa91 f1a1 	rbit	r1, r1
 8001ddc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001de0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001de4:	fab1 f181 	clz	r1, r1
 8001de8:	b2c9      	uxtb	r1, r1
 8001dea:	408b      	lsls	r3, r1
 8001dec:	4920      	ldr	r1, [pc, #128]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
 8001df2:	e06c      	b.n	8001ece <HAL_RCC_OscConfig+0x646>
 8001df4:	2301      	movs	r3, #1
 8001df6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e14:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7fe fde8 	bl	80009f4 <HAL_GetTick>
 8001e24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7fe fde3 	bl	80009f4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d902      	bls.n	8001e40 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	f000 bd5a 	b.w	80028f4 <HAL_RCC_OscConfig+0x106c>
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d104      	bne.n	8001e74 <HAL_RCC_OscConfig+0x5ec>
 8001e6a:	4b01      	ldr	r3, [pc, #4]	@ (8001e70 <HAL_RCC_OscConfig+0x5e8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	e015      	b.n	8001e9c <HAL_RCC_OscConfig+0x614>
 8001e70:	40021000 	.word	0x40021000
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001e8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001e98:	4bc8      	ldr	r3, [pc, #800]	@ (80021bc <HAL_RCC_OscConfig+0x934>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001ea2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ea6:	fa92 f2a2 	rbit	r2, r2
 8001eaa:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001eae:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001eb2:	fab2 f282 	clz	r2, r2
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ad      	bne.n	8001e2a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8110 	beq.w	8002104 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d079      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x760>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	4bab      	ldr	r3, [pc, #684]	@ (80021c0 <HAL_RCC_OscConfig+0x938>)
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fd69 	bl	80009f4 <HAL_GetTick>
 8001f22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f28:	f7fe fd64 	bl	80009f4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d902      	bls.n	8001f3e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	f000 bcdb 	b.w	80028f4 <HAL_RCC_OscConfig+0x106c>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f58:	2202      	movs	r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f98:	4b88      	ldr	r3, [pc, #544]	@ (80021bc <HAL_RCC_OscConfig+0x934>)
 8001f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	6019      	str	r1, [r3, #0]
 8001fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	fa93 f1a3 	rbit	r1, r3
 8001fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fbe:	6019      	str	r1, [r3, #0]
  return result;
 8001fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0a0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x6a0>
 8001fe6:	e08d      	b.n	8002104 <HAL_RCC_OscConfig+0x87c>
 8001fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800200a:	601a      	str	r2, [r3, #0]
  return result;
 800200c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002010:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002014:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4b68      	ldr	r3, [pc, #416]	@ (80021c0 <HAL_RCC_OscConfig+0x938>)
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	461a      	mov	r2, r3
 8002026:	2300      	movs	r3, #0
 8002028:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202a:	f7fe fce3 	bl	80009f4 <HAL_GetTick>
 800202e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002032:	e00a      	b.n	800204a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002034:	f7fe fcde 	bl	80009f4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d902      	bls.n	800204a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	f000 bc55 	b.w	80028f4 <HAL_RCC_OscConfig+0x106c>
 800204a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002052:	2202      	movs	r2, #2
 8002054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fa93 f2a3 	rbit	r2, r3
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002072:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002076:	2202      	movs	r2, #2
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fa93 f2a3 	rbit	r2, r3
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002096:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800209a:	2202      	movs	r2, #2
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	fa93 f2a3 	rbit	r2, r3
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b6:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <HAL_RCC_OscConfig+0x934>)
 80020b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020c2:	2102      	movs	r1, #2
 80020c4:	6019      	str	r1, [r3, #0]
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	fa93 f1a3 	rbit	r1, r3
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020dc:	6019      	str	r1, [r3, #0]
  return result;
 80020de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d197      	bne.n	8002034 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 81a1 	beq.w	800245c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002120:	4b26      	ldr	r3, [pc, #152]	@ (80021bc <HAL_RCC_OscConfig+0x934>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d116      	bne.n	800215a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <HAL_RCC_OscConfig+0x934>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	4a22      	ldr	r2, [pc, #136]	@ (80021bc <HAL_RCC_OscConfig+0x934>)
 8002132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002136:	61d3      	str	r3, [r2, #28]
 8002138:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <HAL_RCC_OscConfig+0x934>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002144:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002152:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002154:	2301      	movs	r3, #1
 8002156:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_RCC_OscConfig+0x93c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11a      	bne.n	800219c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <HAL_RCC_OscConfig+0x93c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a16      	ldr	r2, [pc, #88]	@ (80021c4 <HAL_RCC_OscConfig+0x93c>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002170:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7fe fc3f 	bl	80009f4 <HAL_GetTick>
 8002176:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	e009      	b.n	8002190 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217c:	f7fe fc3a 	bl	80009f4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b64      	cmp	r3, #100	@ 0x64
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e3b1      	b.n	80028f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <HAL_RCC_OscConfig+0x93c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ef      	beq.n	800217c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d10d      	bne.n	80021c8 <HAL_RCC_OscConfig+0x940>
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <HAL_RCC_OscConfig+0x934>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a02      	ldr	r2, [pc, #8]	@ (80021bc <HAL_RCC_OscConfig+0x934>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	e03c      	b.n	8002234 <HAL_RCC_OscConfig+0x9ac>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	10908120 	.word	0x10908120
 80021c4:	40007000 	.word	0x40007000
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x96a>
 80021d8:	4bc1      	ldr	r3, [pc, #772]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4ac0      	ldr	r2, [pc, #768]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	4bbe      	ldr	r3, [pc, #760]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4abd      	ldr	r2, [pc, #756]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 80021ea:	f023 0304 	bic.w	r3, r3, #4
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	e020      	b.n	8002234 <HAL_RCC_OscConfig+0x9ac>
 80021f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x994>
 8002202:	4bb7      	ldr	r3, [pc, #732]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4ab6      	ldr	r2, [pc, #728]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	4bb4      	ldr	r3, [pc, #720]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4ab3      	ldr	r2, [pc, #716]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0x9ac>
 800221c:	4bb0      	ldr	r3, [pc, #704]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4aaf      	ldr	r2, [pc, #700]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	4bad      	ldr	r3, [pc, #692]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4aac      	ldr	r2, [pc, #688]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 800222e:	f023 0304 	bic.w	r3, r3, #4
 8002232:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002238:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8081 	beq.w	8002348 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7fe fbd5 	bl	80009f4 <HAL_GetTick>
 800224a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002250:	f7fe fbd0 	bl	80009f4 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e345      	b.n	80028f4 <HAL_RCC_OscConfig+0x106c>
 8002268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002270:	2202      	movs	r2, #2
 8002272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002278:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fa93 f2a3 	rbit	r2, r3
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002290:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fa93 f2a3 	rbit	r2, r3
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022ae:	601a      	str	r2, [r3, #0]
  return result;
 80022b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0xa4c>
 80022ce:	4b84      	ldr	r3, [pc, #528]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	e013      	b.n	80022fc <HAL_RCC_OscConfig+0xa74>
 80022d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022dc:	2202      	movs	r2, #2
 80022de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f2a3 	rbit	r2, r3
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	4b79      	ldr	r3, [pc, #484]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002300:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002304:	2102      	movs	r1, #2
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800230c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	fa92 f1a2 	rbit	r1, r2
 8002316:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800231a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800231e:	6011      	str	r1, [r2, #0]
  return result;
 8002320:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002324:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	fab2 f282 	clz	r2, r2
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	f002 021f 	and.w	r2, r2, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d084      	beq.n	8002250 <HAL_RCC_OscConfig+0x9c8>
 8002346:	e07f      	b.n	8002448 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7fe fb54 	bl	80009f4 <HAL_GetTick>
 800234c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	e00b      	b.n	800236a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe fb4f 	bl	80009f4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e2c4      	b.n	80028f4 <HAL_RCC_OscConfig+0x106c>
 800236a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002372:	2202      	movs	r2, #2
 8002374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fa93 f2a3 	rbit	r2, r3
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002392:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002396:	2202      	movs	r2, #2
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023b0:	601a      	str	r2, [r3, #0]
  return result;
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d102      	bne.n	80023d6 <HAL_RCC_OscConfig+0xb4e>
 80023d0:	4b43      	ldr	r3, [pc, #268]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	e013      	b.n	80023fe <HAL_RCC_OscConfig+0xb76>
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023de:	2202      	movs	r2, #2
 80023e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002402:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002406:	2102      	movs	r1, #2
 8002408:	6011      	str	r1, [r2, #0]
 800240a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800240e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	fa92 f1a2 	rbit	r1, r2
 8002418:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800241c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002420:	6011      	str	r1, [r2, #0]
  return result;
 8002422:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002426:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	f002 021f 	and.w	r2, r2, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d184      	bne.n	8002352 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002448:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002450:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4a22      	ldr	r2, [pc, #136]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 8002456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002460:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8242 	beq.w	80028f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <HAL_RCC_OscConfig+0xc58>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b08      	cmp	r3, #8
 8002478:	f000 8213 	beq.w	80028a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002480:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b02      	cmp	r3, #2
 800248a:	f040 8162 	bne.w	8002752 <HAL_RCC_OscConfig+0xeca>
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002496:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800249a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f2a3 	rbit	r2, r3
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024b2:	601a      	str	r2, [r3, #0]
  return result;
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	461a      	mov	r2, r3
 80024d0:	2300      	movs	r3, #0
 80024d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fa8e 	bl	80009f4 <HAL_GetTick>
 80024d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	e00c      	b.n	80024f8 <HAL_RCC_OscConfig+0xc70>
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fa86 	bl	80009f4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1fd      	b.n	80028f4 <HAL_RCC_OscConfig+0x106c>
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002500:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800251c:	601a      	str	r2, [r3, #0]
  return result;
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002526:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d102      	bne.n	8002542 <HAL_RCC_OscConfig+0xcba>
 800253c:	4bb0      	ldr	r3, [pc, #704]	@ (8002800 <HAL_RCC_OscConfig+0xf78>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	e027      	b.n	8002592 <HAL_RCC_OscConfig+0xd0a>
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800254a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800254e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002554:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	fa93 f2a3 	rbit	r2, r3
 800255e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002562:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002570:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	fa93 f2a3 	rbit	r2, r3
 8002584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002588:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	4b9c      	ldr	r3, [pc, #624]	@ (8002800 <HAL_RCC_OscConfig+0xf78>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002596:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800259a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800259e:	6011      	str	r1, [r2, #0]
 80025a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	fa92 f1a2 	rbit	r1, r2
 80025ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025b6:	6011      	str	r1, [r2, #0]
  return result;
 80025b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025bc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	fab2 f282 	clz	r2, r2
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f042 0220 	orr.w	r2, r2, #32
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f002 021f 	and.w	r2, r2, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f202 	lsl.w	r2, r1, r2
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d182      	bne.n	80024e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025de:	4b88      	ldr	r3, [pc, #544]	@ (8002800 <HAL_RCC_OscConfig+0xf78>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	430b      	orrs	r3, r1
 8002600:	497f      	ldr	r1, [pc, #508]	@ (8002800 <HAL_RCC_OscConfig+0xf78>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
 8002606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800260e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800262a:	601a      	str	r2, [r3, #0]
  return result;
 800262c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002630:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002634:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002640:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	461a      	mov	r2, r3
 8002648:	2301      	movs	r3, #1
 800264a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe f9d2 	bl	80009f4 <HAL_GetTick>
 8002650:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002654:	e009      	b.n	800266a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe f9cd 	bl	80009f4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e144      	b.n	80028f4 <HAL_RCC_OscConfig+0x106c>
 800266a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002672:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800268e:	601a      	str	r2, [r3, #0]
  return result;
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002698:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d102      	bne.n	80026b4 <HAL_RCC_OscConfig+0xe2c>
 80026ae:	4b54      	ldr	r3, [pc, #336]	@ (8002800 <HAL_RCC_OscConfig+0xf78>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	e027      	b.n	8002704 <HAL_RCC_OscConfig+0xe7c>
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	fa93 f2a3 	rbit	r2, r3
 80026f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	4b3f      	ldr	r3, [pc, #252]	@ (8002800 <HAL_RCC_OscConfig+0xf78>)
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002708:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800270c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002710:	6011      	str	r1, [r2, #0]
 8002712:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002716:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	fa92 f1a2 	rbit	r1, r2
 8002720:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002724:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002728:	6011      	str	r1, [r2, #0]
  return result;
 800272a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800272e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f042 0220 	orr.w	r2, r2, #32
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f002 021f 	and.w	r2, r2, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f202 	lsl.w	r2, r1, r2
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d082      	beq.n	8002656 <HAL_RCC_OscConfig+0xdce>
 8002750:	e0cf      	b.n	80028f2 <HAL_RCC_OscConfig+0x106a>
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800275a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800275e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002764:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	fa93 f2a3 	rbit	r2, r3
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002776:	601a      	str	r2, [r3, #0]
  return result;
 8002778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002780:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800278c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	461a      	mov	r2, r3
 8002794:	2300      	movs	r3, #0
 8002796:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe f92c 	bl	80009f4 <HAL_GetTick>
 800279c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a0:	e009      	b.n	80027b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe f927 	bl	80009f4 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e09e      	b.n	80028f4 <HAL_RCC_OscConfig+0x106c>
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027da:	601a      	str	r2, [r3, #0]
  return result;
 80027dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d104      	bne.n	8002804 <HAL_RCC_OscConfig+0xf7c>
 80027fa:	4b01      	ldr	r3, [pc, #4]	@ (8002800 <HAL_RCC_OscConfig+0xf78>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	e029      	b.n	8002854 <HAL_RCC_OscConfig+0xfcc>
 8002800:	40021000 	.word	0x40021000
 8002804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002808:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800280c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	fa93 f2a3 	rbit	r2, r3
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002832:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <HAL_RCC_OscConfig+0x1078>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002858:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800285c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002860:	6011      	str	r1, [r2, #0]
 8002862:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002866:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	fa92 f1a2 	rbit	r1, r2
 8002870:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002874:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002878:	6011      	str	r1, [r2, #0]
  return result;
 800287a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800287e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	fab2 f282 	clz	r2, r2
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	f042 0220 	orr.w	r2, r2, #32
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f002 021f 	and.w	r2, r2, #31
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f202 	lsl.w	r2, r1, r2
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d180      	bne.n	80027a2 <HAL_RCC_OscConfig+0xf1a>
 80028a0:	e027      	b.n	80028f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e01e      	b.n	80028f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b6:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <HAL_RCC_OscConfig+0x1078>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028c2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10b      	bne.n	80028ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b09e      	sub	sp, #120	@ 0x78
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e162      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b90      	ldr	r3, [pc, #576]	@ (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d910      	bls.n	800294c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b8d      	ldr	r3, [pc, #564]	@ (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0207 	bic.w	r2, r3, #7
 8002932:	498b      	ldr	r1, [pc, #556]	@ (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b89      	ldr	r3, [pc, #548]	@ (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e14a      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002958:	4b82      	ldr	r3, [pc, #520]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	497f      	ldr	r1, [pc, #508]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80dc 	beq.w	8002b30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d13c      	bne.n	80029fa <HAL_RCC_ClockConfig+0xf6>
 8002980:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002984:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800298e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d102      	bne.n	80029aa <HAL_RCC_ClockConfig+0xa6>
 80029a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	e00f      	b.n	80029ca <HAL_RCC_ClockConfig+0xc6>
 80029aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80029b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80029be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029c6:	4b67      	ldr	r3, [pc, #412]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029d2:	fa92 f2a2 	rbit	r2, r2
 80029d6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80029d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029da:	fab2 f282 	clz	r2, r2
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f042 0220 	orr.w	r2, r2, #32
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f002 021f 	and.w	r2, r2, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d17b      	bne.n	8002aee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0f3      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d13c      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x178>
 8002a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a06:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x128>
 8002a26:	4b4f      	ldr	r3, [pc, #316]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e00f      	b.n	8002a4c <HAL_RCC_ClockConfig+0x148>
 8002a2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a48:	4b46      	ldr	r3, [pc, #280]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a50:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a54:	fa92 f2a2 	rbit	r2, r2
 8002a58:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a5c:	fab2 f282 	clz	r2, r2
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f042 0220 	orr.w	r2, r2, #32
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f002 021f 	and.w	r2, r2, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d13a      	bne.n	8002aee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0b2      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x1a0>
 8002a9e:	4b31      	ldr	r3, [pc, #196]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	e00d      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1bc>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	4b29      	ldr	r3, [pc, #164]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	61ba      	str	r2, [r7, #24]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	fa92 f2a2 	rbit	r2, r2
 8002aca:	617a      	str	r2, [r7, #20]
  return result;
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	fab2 f282 	clz	r2, r2
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f002 021f 	and.w	r2, r2, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e079      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	491a      	ldr	r1, [pc, #104]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fd ff78 	bl	80009f4 <HAL_GetTick>
 8002b04:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fd ff74 	bl	80009f4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e061      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d214      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4906      	ldr	r1, [pc, #24]	@ (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e040      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	491a      	ldr	r1, [pc, #104]	@ (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b92:	4b16      	ldr	r3, [pc, #88]	@ (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4912      	ldr	r1, [pc, #72]	@ (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ba6:	f000 f829 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002baa:	4601      	mov	r1, r0
 8002bac:	4b0f      	ldr	r3, [pc, #60]	@ (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb4:	22f0      	movs	r2, #240	@ 0xf0
 8002bb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	fa92 f2a2 	rbit	r2, r2
 8002bbe:	60fa      	str	r2, [r7, #12]
  return result;
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	fab2 f282 	clz	r2, r2
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	40d3      	lsrs	r3, r2
 8002bca:	4a09      	ldr	r2, [pc, #36]	@ (8002bf0 <HAL_RCC_ClockConfig+0x2ec>)
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	fa21 f303 	lsr.w	r3, r1, r3
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <HAL_RCC_ClockConfig+0x2f0>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <HAL_RCC_ClockConfig+0x2f4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fec6 	bl	800096c <HAL_InitTick>
  
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3778      	adds	r7, #120	@ 0x78
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	080046a8 	.word	0x080046a8
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c16:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x30>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x36>
 8002c2a:	e026      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2e:	613b      	str	r3, [r7, #16]
      break;
 8002c30:	e026      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c3c:	5cd3      	ldrb	r3, [r2, r3]
 8002c3e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c40:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	4a14      	ldr	r2, [pc, #80]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c58:	4a0e      	ldr	r2, [pc, #56]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e004      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
      break;
 8002c78:	e002      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c7c:	613b      	str	r3, [r7, #16]
      break;
 8002c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c80:	693b      	ldr	r3, [r7, #16]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	007a1200 	.word	0x007a1200
 8002c98:	080046c0 	.word	0x080046c0
 8002c9c:	080046d0 	.word	0x080046d0
 8002ca0:	003d0900 	.word	0x003d0900

08002ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000000 	.word	0x20000000

08002cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cc2:	f7ff ffef 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cd0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002cd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	fa92 f2a2 	rbit	r2, r2
 8002cdc:	603a      	str	r2, [r7, #0]
  return result;
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	fab2 f282 	clz	r2, r2
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	40d3      	lsrs	r3, r2
 8002ce8:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	080046b8 	.word	0x080046b8

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d06:	f7ff ffcd 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d14:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	fa92 f2a2 	rbit	r2, r2
 8002d20:	603a      	str	r2, [r7, #0]
  return result;
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	40d3      	lsrs	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	080046b8 	.word	0x080046b8

08002d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e040      	b.n	8002dd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd fcaa 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	@ 0x24
 8002d70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f9e8 	bl	8003160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f8af 	bl	8002ef4 <UART_SetConfig>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e01b      	b.n	8002dd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fa67 	bl	80032a4 <UART_CheckIdleState>
 8002dd6:	4603      	mov	r3, r0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d177      	bne.n	8002ee8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_UART_Transmit+0x24>
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e070      	b.n	8002eea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2221      	movs	r2, #33	@ 0x21
 8002e14:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e16:	f7fd fded 	bl	80009f4 <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e34:	d108      	bne.n	8002e48 <HAL_UART_Transmit+0x68>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	e003      	b.n	8002e50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e50:	e02f      	b.n	8002eb2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2180      	movs	r1, #128	@ 0x80
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fac9 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e03b      	b.n	8002eea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	881a      	ldrh	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e84:	b292      	uxth	r2, r2
 8002e86:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	e007      	b.n	8002ea0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1c9      	bne.n	8002e52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2140      	movs	r1, #64	@ 0x40
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fa93 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e005      	b.n	8002eea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8003148 <UART_SetConfig+0x254>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a78      	ldr	r2, [pc, #480]	@ (800314c <UART_SetConfig+0x258>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d120      	bne.n	8002fb2 <UART_SetConfig+0xbe>
 8002f70:	4b77      	ldr	r3, [pc, #476]	@ (8003150 <UART_SetConfig+0x25c>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d817      	bhi.n	8002fac <UART_SetConfig+0xb8>
 8002f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <UART_SetConfig+0x90>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002fa1 	.word	0x08002fa1
 8002f8c:	08002fa7 	.word	0x08002fa7
 8002f90:	08002f9b 	.word	0x08002f9b
 8002f94:	2300      	movs	r3, #0
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e01d      	b.n	8002fd6 <UART_SetConfig+0xe2>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e01a      	b.n	8002fd6 <UART_SetConfig+0xe2>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e017      	b.n	8002fd6 <UART_SetConfig+0xe2>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e014      	b.n	8002fd6 <UART_SetConfig+0xe2>
 8002fac:	2310      	movs	r3, #16
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e011      	b.n	8002fd6 <UART_SetConfig+0xe2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a67      	ldr	r2, [pc, #412]	@ (8003154 <UART_SetConfig+0x260>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d102      	bne.n	8002fc2 <UART_SetConfig+0xce>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e009      	b.n	8002fd6 <UART_SetConfig+0xe2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a64      	ldr	r2, [pc, #400]	@ (8003158 <UART_SetConfig+0x264>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d102      	bne.n	8002fd2 <UART_SetConfig+0xde>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e001      	b.n	8002fd6 <UART_SetConfig+0xe2>
 8002fd2:	2310      	movs	r3, #16
 8002fd4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fde:	d15a      	bne.n	8003096 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d827      	bhi.n	8003036 <UART_SetConfig+0x142>
 8002fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <UART_SetConfig+0xf8>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08003011 	.word	0x08003011
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	08003021 	.word	0x08003021
 8002ff8:	08003037 	.word	0x08003037
 8002ffc:	08003027 	.word	0x08003027
 8003000:	08003037 	.word	0x08003037
 8003004:	08003037 	.word	0x08003037
 8003008:	08003037 	.word	0x08003037
 800300c:	0800302f 	.word	0x0800302f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7ff fe54 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 8003014:	61b8      	str	r0, [r7, #24]
        break;
 8003016:	e013      	b.n	8003040 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003018:	f7ff fe72 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 800301c:	61b8      	str	r0, [r7, #24]
        break;
 800301e:	e00f      	b.n	8003040 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003020:	4b4e      	ldr	r3, [pc, #312]	@ (800315c <UART_SetConfig+0x268>)
 8003022:	61bb      	str	r3, [r7, #24]
        break;
 8003024:	e00c      	b.n	8003040 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003026:	f7ff fde9 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 800302a:	61b8      	str	r0, [r7, #24]
        break;
 800302c:	e008      	b.n	8003040 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800302e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003032:	61bb      	str	r3, [r7, #24]
        break;
 8003034:	e004      	b.n	8003040 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	77bb      	strb	r3, [r7, #30]
        break;
 800303e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d074      	beq.n	8003130 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	005a      	lsls	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	441a      	add	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	d916      	bls.n	8003090 <UART_SetConfig+0x19c>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003068:	d212      	bcs.n	8003090 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f023 030f 	bic.w	r3, r3, #15
 8003072:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	b29b      	uxth	r3, r3
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	b29a      	uxth	r2, r3
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	4313      	orrs	r3, r2
 8003084:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	89fa      	ldrh	r2, [r7, #14]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	e04f      	b.n	8003130 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	77bb      	strb	r3, [r7, #30]
 8003094:	e04c      	b.n	8003130 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003096:	7ffb      	ldrb	r3, [r7, #31]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d828      	bhi.n	80030ee <UART_SetConfig+0x1fa>
 800309c:	a201      	add	r2, pc, #4	@ (adr r2, 80030a4 <UART_SetConfig+0x1b0>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030c9 	.word	0x080030c9
 80030a8:	080030d1 	.word	0x080030d1
 80030ac:	080030d9 	.word	0x080030d9
 80030b0:	080030ef 	.word	0x080030ef
 80030b4:	080030df 	.word	0x080030df
 80030b8:	080030ef 	.word	0x080030ef
 80030bc:	080030ef 	.word	0x080030ef
 80030c0:	080030ef 	.word	0x080030ef
 80030c4:	080030e7 	.word	0x080030e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c8:	f7ff fdf8 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 80030cc:	61b8      	str	r0, [r7, #24]
        break;
 80030ce:	e013      	b.n	80030f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d0:	f7ff fe16 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 80030d4:	61b8      	str	r0, [r7, #24]
        break;
 80030d6:	e00f      	b.n	80030f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030d8:	4b20      	ldr	r3, [pc, #128]	@ (800315c <UART_SetConfig+0x268>)
 80030da:	61bb      	str	r3, [r7, #24]
        break;
 80030dc:	e00c      	b.n	80030f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030de:	f7ff fd8d 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 80030e2:	61b8      	str	r0, [r7, #24]
        break;
 80030e4:	e008      	b.n	80030f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ea:	61bb      	str	r3, [r7, #24]
        break;
 80030ec:	e004      	b.n	80030f8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	77bb      	strb	r3, [r7, #30]
        break;
 80030f6:	bf00      	nop
    }

    if (pclk != 0U)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d018      	beq.n	8003130 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	085a      	lsrs	r2, r3, #1
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	441a      	add	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d909      	bls.n	800312c <UART_SetConfig+0x238>
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311e:	d205      	bcs.n	800312c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	b29a      	uxth	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	e001      	b.n	8003130 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800313c:	7fbb      	ldrb	r3, [r7, #30]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	efff69f3 	.word	0xefff69f3
 800314c:	40013800 	.word	0x40013800
 8003150:	40021000 	.word	0x40021000
 8003154:	40004400 	.word	0x40004400
 8003158:	40004800 	.word	0x40004800
 800315c:	007a1200 	.word	0x007a1200

08003160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01a      	beq.n	8003276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800325e:	d10a      	bne.n	8003276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
  }
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b098      	sub	sp, #96	@ 0x60
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032b4:	f7fd fb9e 	bl	80009f4 <HAL_GetTick>
 80032b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d12e      	bne.n	8003326 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d0:	2200      	movs	r2, #0
 80032d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f88c 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d021      	beq.n	8003326 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003300:	647b      	str	r3, [r7, #68]	@ 0x44
 8003302:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800330e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e6      	bne.n	80032e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e062      	b.n	80033ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b04      	cmp	r3, #4
 8003332:	d149      	bne.n	80033c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333c:	2200      	movs	r2, #0
 800333e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f856 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d03c      	beq.n	80033c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	623b      	str	r3, [r7, #32]
   return(result);
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800336c:	633b      	str	r3, [r7, #48]	@ 0x30
 800336e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003374:	e841 2300 	strex	r3, r2, [r1]
 8003378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e6      	bne.n	800334e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3308      	adds	r3, #8
 8003386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033a0:	61fa      	str	r2, [r7, #28]
 80033a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	69b9      	ldr	r1, [r7, #24]
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	617b      	str	r3, [r7, #20]
   return(result);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e011      	b.n	80033ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3758      	adds	r7, #88	@ 0x58
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	e04f      	b.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800340c:	d04b      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fd faf1 	bl	80009f4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <UART_WaitOnFlagUntilTimeout+0x30>
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e04e      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d037      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b80      	cmp	r3, #128	@ 0x80
 800343a:	d034      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b40      	cmp	r3, #64	@ 0x40
 8003440:	d031      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d110      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2208      	movs	r2, #8
 8003456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f838 	bl	80034ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2208      	movs	r2, #8
 8003462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e029      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800347c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003480:	d111      	bne.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800348a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f81e 	bl	80034ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e00f      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4013      	ands	r3, r2
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d0a0      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b095      	sub	sp, #84	@ 0x54
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80034f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034fc:	e841 2300 	strex	r3, r2, [r1]
 8003500:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e6      	bne.n	80034d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3308      	adds	r3, #8
 800350e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	e853 3f00 	ldrex	r3, [r3]
 8003516:	61fb      	str	r3, [r7, #28]
   return(result);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3308      	adds	r3, #8
 8003526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800352a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800352e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e5      	bne.n	8003508 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003540:	2b01      	cmp	r3, #1
 8003542:	d118      	bne.n	8003576 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	60bb      	str	r3, [r7, #8]
   return(result);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f023 0310 	bic.w	r3, r3, #16
 8003558:	647b      	str	r3, [r7, #68]	@ 0x44
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	613b      	str	r3, [r7, #16]
   return(result);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e6      	bne.n	8003544 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800358a:	bf00      	nop
 800358c:	3754      	adds	r7, #84	@ 0x54
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <std>:
 8003598:	2300      	movs	r3, #0
 800359a:	b510      	push	{r4, lr}
 800359c:	4604      	mov	r4, r0
 800359e:	e9c0 3300 	strd	r3, r3, [r0]
 80035a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035a6:	6083      	str	r3, [r0, #8]
 80035a8:	8181      	strh	r1, [r0, #12]
 80035aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80035ac:	81c2      	strh	r2, [r0, #14]
 80035ae:	6183      	str	r3, [r0, #24]
 80035b0:	4619      	mov	r1, r3
 80035b2:	2208      	movs	r2, #8
 80035b4:	305c      	adds	r0, #92	@ 0x5c
 80035b6:	f000 fab5 	bl	8003b24 <memset>
 80035ba:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <std+0x58>)
 80035bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80035be:	4b0d      	ldr	r3, [pc, #52]	@ (80035f4 <std+0x5c>)
 80035c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80035c2:	4b0d      	ldr	r3, [pc, #52]	@ (80035f8 <std+0x60>)
 80035c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80035c6:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <std+0x64>)
 80035c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80035ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003600 <std+0x68>)
 80035cc:	6224      	str	r4, [r4, #32]
 80035ce:	429c      	cmp	r4, r3
 80035d0:	d006      	beq.n	80035e0 <std+0x48>
 80035d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035d6:	4294      	cmp	r4, r2
 80035d8:	d002      	beq.n	80035e0 <std+0x48>
 80035da:	33d0      	adds	r3, #208	@ 0xd0
 80035dc:	429c      	cmp	r4, r3
 80035de:	d105      	bne.n	80035ec <std+0x54>
 80035e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e8:	f000 bb14 	b.w	8003c14 <__retarget_lock_init_recursive>
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	bf00      	nop
 80035f0:	08003975 	.word	0x08003975
 80035f4:	08003997 	.word	0x08003997
 80035f8:	080039cf 	.word	0x080039cf
 80035fc:	080039f3 	.word	0x080039f3
 8003600:	20000164 	.word	0x20000164

08003604 <stdio_exit_handler>:
 8003604:	4a02      	ldr	r2, [pc, #8]	@ (8003610 <stdio_exit_handler+0xc>)
 8003606:	4903      	ldr	r1, [pc, #12]	@ (8003614 <stdio_exit_handler+0x10>)
 8003608:	4803      	ldr	r0, [pc, #12]	@ (8003618 <stdio_exit_handler+0x14>)
 800360a:	f000 b869 	b.w	80036e0 <_fwalk_sglue>
 800360e:	bf00      	nop
 8003610:	2000000c 	.word	0x2000000c
 8003614:	080044c5 	.word	0x080044c5
 8003618:	2000001c 	.word	0x2000001c

0800361c <cleanup_stdio>:
 800361c:	6841      	ldr	r1, [r0, #4]
 800361e:	4b0c      	ldr	r3, [pc, #48]	@ (8003650 <cleanup_stdio+0x34>)
 8003620:	4299      	cmp	r1, r3
 8003622:	b510      	push	{r4, lr}
 8003624:	4604      	mov	r4, r0
 8003626:	d001      	beq.n	800362c <cleanup_stdio+0x10>
 8003628:	f000 ff4c 	bl	80044c4 <_fflush_r>
 800362c:	68a1      	ldr	r1, [r4, #8]
 800362e:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <cleanup_stdio+0x38>)
 8003630:	4299      	cmp	r1, r3
 8003632:	d002      	beq.n	800363a <cleanup_stdio+0x1e>
 8003634:	4620      	mov	r0, r4
 8003636:	f000 ff45 	bl	80044c4 <_fflush_r>
 800363a:	68e1      	ldr	r1, [r4, #12]
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <cleanup_stdio+0x3c>)
 800363e:	4299      	cmp	r1, r3
 8003640:	d004      	beq.n	800364c <cleanup_stdio+0x30>
 8003642:	4620      	mov	r0, r4
 8003644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003648:	f000 bf3c 	b.w	80044c4 <_fflush_r>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	bf00      	nop
 8003650:	20000164 	.word	0x20000164
 8003654:	200001cc 	.word	0x200001cc
 8003658:	20000234 	.word	0x20000234

0800365c <global_stdio_init.part.0>:
 800365c:	b510      	push	{r4, lr}
 800365e:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <global_stdio_init.part.0+0x30>)
 8003660:	4c0b      	ldr	r4, [pc, #44]	@ (8003690 <global_stdio_init.part.0+0x34>)
 8003662:	4a0c      	ldr	r2, [pc, #48]	@ (8003694 <global_stdio_init.part.0+0x38>)
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	4620      	mov	r0, r4
 8003668:	2200      	movs	r2, #0
 800366a:	2104      	movs	r1, #4
 800366c:	f7ff ff94 	bl	8003598 <std>
 8003670:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003674:	2201      	movs	r2, #1
 8003676:	2109      	movs	r1, #9
 8003678:	f7ff ff8e 	bl	8003598 <std>
 800367c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003680:	2202      	movs	r2, #2
 8003682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003686:	2112      	movs	r1, #18
 8003688:	f7ff bf86 	b.w	8003598 <std>
 800368c:	2000029c 	.word	0x2000029c
 8003690:	20000164 	.word	0x20000164
 8003694:	08003605 	.word	0x08003605

08003698 <__sfp_lock_acquire>:
 8003698:	4801      	ldr	r0, [pc, #4]	@ (80036a0 <__sfp_lock_acquire+0x8>)
 800369a:	f000 babc 	b.w	8003c16 <__retarget_lock_acquire_recursive>
 800369e:	bf00      	nop
 80036a0:	200002a5 	.word	0x200002a5

080036a4 <__sfp_lock_release>:
 80036a4:	4801      	ldr	r0, [pc, #4]	@ (80036ac <__sfp_lock_release+0x8>)
 80036a6:	f000 bab7 	b.w	8003c18 <__retarget_lock_release_recursive>
 80036aa:	bf00      	nop
 80036ac:	200002a5 	.word	0x200002a5

080036b0 <__sinit>:
 80036b0:	b510      	push	{r4, lr}
 80036b2:	4604      	mov	r4, r0
 80036b4:	f7ff fff0 	bl	8003698 <__sfp_lock_acquire>
 80036b8:	6a23      	ldr	r3, [r4, #32]
 80036ba:	b11b      	cbz	r3, 80036c4 <__sinit+0x14>
 80036bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c0:	f7ff bff0 	b.w	80036a4 <__sfp_lock_release>
 80036c4:	4b04      	ldr	r3, [pc, #16]	@ (80036d8 <__sinit+0x28>)
 80036c6:	6223      	str	r3, [r4, #32]
 80036c8:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <__sinit+0x2c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f5      	bne.n	80036bc <__sinit+0xc>
 80036d0:	f7ff ffc4 	bl	800365c <global_stdio_init.part.0>
 80036d4:	e7f2      	b.n	80036bc <__sinit+0xc>
 80036d6:	bf00      	nop
 80036d8:	0800361d 	.word	0x0800361d
 80036dc:	2000029c 	.word	0x2000029c

080036e0 <_fwalk_sglue>:
 80036e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036e4:	4607      	mov	r7, r0
 80036e6:	4688      	mov	r8, r1
 80036e8:	4614      	mov	r4, r2
 80036ea:	2600      	movs	r6, #0
 80036ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036f0:	f1b9 0901 	subs.w	r9, r9, #1
 80036f4:	d505      	bpl.n	8003702 <_fwalk_sglue+0x22>
 80036f6:	6824      	ldr	r4, [r4, #0]
 80036f8:	2c00      	cmp	r4, #0
 80036fa:	d1f7      	bne.n	80036ec <_fwalk_sglue+0xc>
 80036fc:	4630      	mov	r0, r6
 80036fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003702:	89ab      	ldrh	r3, [r5, #12]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d907      	bls.n	8003718 <_fwalk_sglue+0x38>
 8003708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800370c:	3301      	adds	r3, #1
 800370e:	d003      	beq.n	8003718 <_fwalk_sglue+0x38>
 8003710:	4629      	mov	r1, r5
 8003712:	4638      	mov	r0, r7
 8003714:	47c0      	blx	r8
 8003716:	4306      	orrs	r6, r0
 8003718:	3568      	adds	r5, #104	@ 0x68
 800371a:	e7e9      	b.n	80036f0 <_fwalk_sglue+0x10>

0800371c <iprintf>:
 800371c:	b40f      	push	{r0, r1, r2, r3}
 800371e:	b507      	push	{r0, r1, r2, lr}
 8003720:	4906      	ldr	r1, [pc, #24]	@ (800373c <iprintf+0x20>)
 8003722:	ab04      	add	r3, sp, #16
 8003724:	6808      	ldr	r0, [r1, #0]
 8003726:	f853 2b04 	ldr.w	r2, [r3], #4
 800372a:	6881      	ldr	r1, [r0, #8]
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	f000 fb9f 	bl	8003e70 <_vfiprintf_r>
 8003732:	b003      	add	sp, #12
 8003734:	f85d eb04 	ldr.w	lr, [sp], #4
 8003738:	b004      	add	sp, #16
 800373a:	4770      	bx	lr
 800373c:	20000018 	.word	0x20000018

08003740 <_puts_r>:
 8003740:	6a03      	ldr	r3, [r0, #32]
 8003742:	b570      	push	{r4, r5, r6, lr}
 8003744:	6884      	ldr	r4, [r0, #8]
 8003746:	4605      	mov	r5, r0
 8003748:	460e      	mov	r6, r1
 800374a:	b90b      	cbnz	r3, 8003750 <_puts_r+0x10>
 800374c:	f7ff ffb0 	bl	80036b0 <__sinit>
 8003750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003752:	07db      	lsls	r3, r3, #31
 8003754:	d405      	bmi.n	8003762 <_puts_r+0x22>
 8003756:	89a3      	ldrh	r3, [r4, #12]
 8003758:	0598      	lsls	r0, r3, #22
 800375a:	d402      	bmi.n	8003762 <_puts_r+0x22>
 800375c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800375e:	f000 fa5a 	bl	8003c16 <__retarget_lock_acquire_recursive>
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	0719      	lsls	r1, r3, #28
 8003766:	d502      	bpl.n	800376e <_puts_r+0x2e>
 8003768:	6923      	ldr	r3, [r4, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d135      	bne.n	80037da <_puts_r+0x9a>
 800376e:	4621      	mov	r1, r4
 8003770:	4628      	mov	r0, r5
 8003772:	f000 f981 	bl	8003a78 <__swsetup_r>
 8003776:	b380      	cbz	r0, 80037da <_puts_r+0x9a>
 8003778:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800377c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800377e:	07da      	lsls	r2, r3, #31
 8003780:	d405      	bmi.n	800378e <_puts_r+0x4e>
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	059b      	lsls	r3, r3, #22
 8003786:	d402      	bmi.n	800378e <_puts_r+0x4e>
 8003788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800378a:	f000 fa45 	bl	8003c18 <__retarget_lock_release_recursive>
 800378e:	4628      	mov	r0, r5
 8003790:	bd70      	pop	{r4, r5, r6, pc}
 8003792:	2b00      	cmp	r3, #0
 8003794:	da04      	bge.n	80037a0 <_puts_r+0x60>
 8003796:	69a2      	ldr	r2, [r4, #24]
 8003798:	429a      	cmp	r2, r3
 800379a:	dc17      	bgt.n	80037cc <_puts_r+0x8c>
 800379c:	290a      	cmp	r1, #10
 800379e:	d015      	beq.n	80037cc <_puts_r+0x8c>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	6022      	str	r2, [r4, #0]
 80037a6:	7019      	strb	r1, [r3, #0]
 80037a8:	68a3      	ldr	r3, [r4, #8]
 80037aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037ae:	3b01      	subs	r3, #1
 80037b0:	60a3      	str	r3, [r4, #8]
 80037b2:	2900      	cmp	r1, #0
 80037b4:	d1ed      	bne.n	8003792 <_puts_r+0x52>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da11      	bge.n	80037de <_puts_r+0x9e>
 80037ba:	4622      	mov	r2, r4
 80037bc:	210a      	movs	r1, #10
 80037be:	4628      	mov	r0, r5
 80037c0:	f000 f91b 	bl	80039fa <__swbuf_r>
 80037c4:	3001      	adds	r0, #1
 80037c6:	d0d7      	beq.n	8003778 <_puts_r+0x38>
 80037c8:	250a      	movs	r5, #10
 80037ca:	e7d7      	b.n	800377c <_puts_r+0x3c>
 80037cc:	4622      	mov	r2, r4
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 f913 	bl	80039fa <__swbuf_r>
 80037d4:	3001      	adds	r0, #1
 80037d6:	d1e7      	bne.n	80037a8 <_puts_r+0x68>
 80037d8:	e7ce      	b.n	8003778 <_puts_r+0x38>
 80037da:	3e01      	subs	r6, #1
 80037dc:	e7e4      	b.n	80037a8 <_puts_r+0x68>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	6022      	str	r2, [r4, #0]
 80037e4:	220a      	movs	r2, #10
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	e7ee      	b.n	80037c8 <_puts_r+0x88>
	...

080037ec <puts>:
 80037ec:	4b02      	ldr	r3, [pc, #8]	@ (80037f8 <puts+0xc>)
 80037ee:	4601      	mov	r1, r0
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	f7ff bfa5 	b.w	8003740 <_puts_r>
 80037f6:	bf00      	nop
 80037f8:	20000018 	.word	0x20000018

080037fc <setbuf>:
 80037fc:	fab1 f281 	clz	r2, r1
 8003800:	0952      	lsrs	r2, r2, #5
 8003802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003806:	0052      	lsls	r2, r2, #1
 8003808:	f000 b800 	b.w	800380c <setvbuf>

0800380c <setvbuf>:
 800380c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003810:	461d      	mov	r5, r3
 8003812:	4b57      	ldr	r3, [pc, #348]	@ (8003970 <setvbuf+0x164>)
 8003814:	681f      	ldr	r7, [r3, #0]
 8003816:	4604      	mov	r4, r0
 8003818:	460e      	mov	r6, r1
 800381a:	4690      	mov	r8, r2
 800381c:	b127      	cbz	r7, 8003828 <setvbuf+0x1c>
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	b913      	cbnz	r3, 8003828 <setvbuf+0x1c>
 8003822:	4638      	mov	r0, r7
 8003824:	f7ff ff44 	bl	80036b0 <__sinit>
 8003828:	f1b8 0f02 	cmp.w	r8, #2
 800382c:	d006      	beq.n	800383c <setvbuf+0x30>
 800382e:	f1b8 0f01 	cmp.w	r8, #1
 8003832:	f200 809a 	bhi.w	800396a <setvbuf+0x15e>
 8003836:	2d00      	cmp	r5, #0
 8003838:	f2c0 8097 	blt.w	800396a <setvbuf+0x15e>
 800383c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800383e:	07d9      	lsls	r1, r3, #31
 8003840:	d405      	bmi.n	800384e <setvbuf+0x42>
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	059a      	lsls	r2, r3, #22
 8003846:	d402      	bmi.n	800384e <setvbuf+0x42>
 8003848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800384a:	f000 f9e4 	bl	8003c16 <__retarget_lock_acquire_recursive>
 800384e:	4621      	mov	r1, r4
 8003850:	4638      	mov	r0, r7
 8003852:	f000 fe37 	bl	80044c4 <_fflush_r>
 8003856:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003858:	b141      	cbz	r1, 800386c <setvbuf+0x60>
 800385a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800385e:	4299      	cmp	r1, r3
 8003860:	d002      	beq.n	8003868 <setvbuf+0x5c>
 8003862:	4638      	mov	r0, r7
 8003864:	f000 f9da 	bl	8003c1c <_free_r>
 8003868:	2300      	movs	r3, #0
 800386a:	6363      	str	r3, [r4, #52]	@ 0x34
 800386c:	2300      	movs	r3, #0
 800386e:	61a3      	str	r3, [r4, #24]
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	d503      	bpl.n	8003880 <setvbuf+0x74>
 8003878:	6921      	ldr	r1, [r4, #16]
 800387a:	4638      	mov	r0, r7
 800387c:	f000 f9ce 	bl	8003c1c <_free_r>
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	f1b8 0f02 	cmp.w	r8, #2
 800388e:	81a3      	strh	r3, [r4, #12]
 8003890:	d061      	beq.n	8003956 <setvbuf+0x14a>
 8003892:	ab01      	add	r3, sp, #4
 8003894:	466a      	mov	r2, sp
 8003896:	4621      	mov	r1, r4
 8003898:	4638      	mov	r0, r7
 800389a:	f000 fe3b 	bl	8004514 <__swhatbuf_r>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	4318      	orrs	r0, r3
 80038a2:	81a0      	strh	r0, [r4, #12]
 80038a4:	bb2d      	cbnz	r5, 80038f2 <setvbuf+0xe6>
 80038a6:	9d00      	ldr	r5, [sp, #0]
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 fa01 	bl	8003cb0 <malloc>
 80038ae:	4606      	mov	r6, r0
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d152      	bne.n	800395a <setvbuf+0x14e>
 80038b4:	f8dd 9000 	ldr.w	r9, [sp]
 80038b8:	45a9      	cmp	r9, r5
 80038ba:	d140      	bne.n	800393e <setvbuf+0x132>
 80038bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80038c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038c4:	f043 0202 	orr.w	r2, r3, #2
 80038c8:	81a2      	strh	r2, [r4, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	60a2      	str	r2, [r4, #8]
 80038ce:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80038d2:	6022      	str	r2, [r4, #0]
 80038d4:	6122      	str	r2, [r4, #16]
 80038d6:	2201      	movs	r2, #1
 80038d8:	6162      	str	r2, [r4, #20]
 80038da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038dc:	07d6      	lsls	r6, r2, #31
 80038de:	d404      	bmi.n	80038ea <setvbuf+0xde>
 80038e0:	0598      	lsls	r0, r3, #22
 80038e2:	d402      	bmi.n	80038ea <setvbuf+0xde>
 80038e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038e6:	f000 f997 	bl	8003c18 <__retarget_lock_release_recursive>
 80038ea:	4628      	mov	r0, r5
 80038ec:	b003      	add	sp, #12
 80038ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038f2:	2e00      	cmp	r6, #0
 80038f4:	d0d8      	beq.n	80038a8 <setvbuf+0x9c>
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	b913      	cbnz	r3, 8003900 <setvbuf+0xf4>
 80038fa:	4638      	mov	r0, r7
 80038fc:	f7ff fed8 	bl	80036b0 <__sinit>
 8003900:	f1b8 0f01 	cmp.w	r8, #1
 8003904:	bf08      	it	eq
 8003906:	89a3      	ldrheq	r3, [r4, #12]
 8003908:	6026      	str	r6, [r4, #0]
 800390a:	bf04      	itt	eq
 800390c:	f043 0301 	orreq.w	r3, r3, #1
 8003910:	81a3      	strheq	r3, [r4, #12]
 8003912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003916:	f013 0208 	ands.w	r2, r3, #8
 800391a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800391e:	d01e      	beq.n	800395e <setvbuf+0x152>
 8003920:	07d9      	lsls	r1, r3, #31
 8003922:	bf41      	itttt	mi
 8003924:	2200      	movmi	r2, #0
 8003926:	426d      	negmi	r5, r5
 8003928:	60a2      	strmi	r2, [r4, #8]
 800392a:	61a5      	strmi	r5, [r4, #24]
 800392c:	bf58      	it	pl
 800392e:	60a5      	strpl	r5, [r4, #8]
 8003930:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003932:	07d2      	lsls	r2, r2, #31
 8003934:	d401      	bmi.n	800393a <setvbuf+0x12e>
 8003936:	059b      	lsls	r3, r3, #22
 8003938:	d513      	bpl.n	8003962 <setvbuf+0x156>
 800393a:	2500      	movs	r5, #0
 800393c:	e7d5      	b.n	80038ea <setvbuf+0xde>
 800393e:	4648      	mov	r0, r9
 8003940:	f000 f9b6 	bl	8003cb0 <malloc>
 8003944:	4606      	mov	r6, r0
 8003946:	2800      	cmp	r0, #0
 8003948:	d0b8      	beq.n	80038bc <setvbuf+0xb0>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	464d      	mov	r5, r9
 8003954:	e7cf      	b.n	80038f6 <setvbuf+0xea>
 8003956:	2500      	movs	r5, #0
 8003958:	e7b2      	b.n	80038c0 <setvbuf+0xb4>
 800395a:	46a9      	mov	r9, r5
 800395c:	e7f5      	b.n	800394a <setvbuf+0x13e>
 800395e:	60a2      	str	r2, [r4, #8]
 8003960:	e7e6      	b.n	8003930 <setvbuf+0x124>
 8003962:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003964:	f000 f958 	bl	8003c18 <__retarget_lock_release_recursive>
 8003968:	e7e7      	b.n	800393a <setvbuf+0x12e>
 800396a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800396e:	e7bc      	b.n	80038ea <setvbuf+0xde>
 8003970:	20000018 	.word	0x20000018

08003974 <__sread>:
 8003974:	b510      	push	{r4, lr}
 8003976:	460c      	mov	r4, r1
 8003978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397c:	f000 f8fc 	bl	8003b78 <_read_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	bfab      	itete	ge
 8003984:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003986:	89a3      	ldrhlt	r3, [r4, #12]
 8003988:	181b      	addge	r3, r3, r0
 800398a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800398e:	bfac      	ite	ge
 8003990:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003992:	81a3      	strhlt	r3, [r4, #12]
 8003994:	bd10      	pop	{r4, pc}

08003996 <__swrite>:
 8003996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800399a:	461f      	mov	r7, r3
 800399c:	898b      	ldrh	r3, [r1, #12]
 800399e:	05db      	lsls	r3, r3, #23
 80039a0:	4605      	mov	r5, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	4616      	mov	r6, r2
 80039a6:	d505      	bpl.n	80039b4 <__swrite+0x1e>
 80039a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ac:	2302      	movs	r3, #2
 80039ae:	2200      	movs	r2, #0
 80039b0:	f000 f8d0 	bl	8003b54 <_lseek_r>
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039be:	81a3      	strh	r3, [r4, #12]
 80039c0:	4632      	mov	r2, r6
 80039c2:	463b      	mov	r3, r7
 80039c4:	4628      	mov	r0, r5
 80039c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ca:	f000 b8e7 	b.w	8003b9c <_write_r>

080039ce <__sseek>:
 80039ce:	b510      	push	{r4, lr}
 80039d0:	460c      	mov	r4, r1
 80039d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d6:	f000 f8bd 	bl	8003b54 <_lseek_r>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	bf15      	itete	ne
 80039e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80039e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80039e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80039ea:	81a3      	strheq	r3, [r4, #12]
 80039ec:	bf18      	it	ne
 80039ee:	81a3      	strhne	r3, [r4, #12]
 80039f0:	bd10      	pop	{r4, pc}

080039f2 <__sclose>:
 80039f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f6:	f000 b89d 	b.w	8003b34 <_close_r>

080039fa <__swbuf_r>:
 80039fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fc:	460e      	mov	r6, r1
 80039fe:	4614      	mov	r4, r2
 8003a00:	4605      	mov	r5, r0
 8003a02:	b118      	cbz	r0, 8003a0c <__swbuf_r+0x12>
 8003a04:	6a03      	ldr	r3, [r0, #32]
 8003a06:	b90b      	cbnz	r3, 8003a0c <__swbuf_r+0x12>
 8003a08:	f7ff fe52 	bl	80036b0 <__sinit>
 8003a0c:	69a3      	ldr	r3, [r4, #24]
 8003a0e:	60a3      	str	r3, [r4, #8]
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	071a      	lsls	r2, r3, #28
 8003a14:	d501      	bpl.n	8003a1a <__swbuf_r+0x20>
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	b943      	cbnz	r3, 8003a2c <__swbuf_r+0x32>
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f000 f82b 	bl	8003a78 <__swsetup_r>
 8003a22:	b118      	cbz	r0, 8003a2c <__swbuf_r+0x32>
 8003a24:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003a28:	4638      	mov	r0, r7
 8003a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	6922      	ldr	r2, [r4, #16]
 8003a30:	1a98      	subs	r0, r3, r2
 8003a32:	6963      	ldr	r3, [r4, #20]
 8003a34:	b2f6      	uxtb	r6, r6
 8003a36:	4283      	cmp	r3, r0
 8003a38:	4637      	mov	r7, r6
 8003a3a:	dc05      	bgt.n	8003a48 <__swbuf_r+0x4e>
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f000 fd40 	bl	80044c4 <_fflush_r>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d1ed      	bne.n	8003a24 <__swbuf_r+0x2a>
 8003a48:	68a3      	ldr	r3, [r4, #8]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	60a3      	str	r3, [r4, #8]
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	6022      	str	r2, [r4, #0]
 8003a54:	701e      	strb	r6, [r3, #0]
 8003a56:	6962      	ldr	r2, [r4, #20]
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d004      	beq.n	8003a68 <__swbuf_r+0x6e>
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	07db      	lsls	r3, r3, #31
 8003a62:	d5e1      	bpl.n	8003a28 <__swbuf_r+0x2e>
 8003a64:	2e0a      	cmp	r6, #10
 8003a66:	d1df      	bne.n	8003a28 <__swbuf_r+0x2e>
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f000 fd2a 	bl	80044c4 <_fflush_r>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d0d9      	beq.n	8003a28 <__swbuf_r+0x2e>
 8003a74:	e7d6      	b.n	8003a24 <__swbuf_r+0x2a>
	...

08003a78 <__swsetup_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4b29      	ldr	r3, [pc, #164]	@ (8003b20 <__swsetup_r+0xa8>)
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	460c      	mov	r4, r1
 8003a82:	b118      	cbz	r0, 8003a8c <__swsetup_r+0x14>
 8003a84:	6a03      	ldr	r3, [r0, #32]
 8003a86:	b90b      	cbnz	r3, 8003a8c <__swsetup_r+0x14>
 8003a88:	f7ff fe12 	bl	80036b0 <__sinit>
 8003a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a90:	0719      	lsls	r1, r3, #28
 8003a92:	d422      	bmi.n	8003ada <__swsetup_r+0x62>
 8003a94:	06da      	lsls	r2, r3, #27
 8003a96:	d407      	bmi.n	8003aa8 <__swsetup_r+0x30>
 8003a98:	2209      	movs	r2, #9
 8003a9a:	602a      	str	r2, [r5, #0]
 8003a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003aa6:	e033      	b.n	8003b10 <__swsetup_r+0x98>
 8003aa8:	0758      	lsls	r0, r3, #29
 8003aaa:	d512      	bpl.n	8003ad2 <__swsetup_r+0x5a>
 8003aac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003aae:	b141      	cbz	r1, 8003ac2 <__swsetup_r+0x4a>
 8003ab0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ab4:	4299      	cmp	r1, r3
 8003ab6:	d002      	beq.n	8003abe <__swsetup_r+0x46>
 8003ab8:	4628      	mov	r0, r5
 8003aba:	f000 f8af 	bl	8003c1c <_free_r>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ac8:	81a3      	strh	r3, [r4, #12]
 8003aca:	2300      	movs	r3, #0
 8003acc:	6063      	str	r3, [r4, #4]
 8003ace:	6923      	ldr	r3, [r4, #16]
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	f043 0308 	orr.w	r3, r3, #8
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	6923      	ldr	r3, [r4, #16]
 8003adc:	b94b      	cbnz	r3, 8003af2 <__swsetup_r+0x7a>
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae8:	d003      	beq.n	8003af2 <__swsetup_r+0x7a>
 8003aea:	4621      	mov	r1, r4
 8003aec:	4628      	mov	r0, r5
 8003aee:	f000 fd37 	bl	8004560 <__smakebuf_r>
 8003af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003af6:	f013 0201 	ands.w	r2, r3, #1
 8003afa:	d00a      	beq.n	8003b12 <__swsetup_r+0x9a>
 8003afc:	2200      	movs	r2, #0
 8003afe:	60a2      	str	r2, [r4, #8]
 8003b00:	6962      	ldr	r2, [r4, #20]
 8003b02:	4252      	negs	r2, r2
 8003b04:	61a2      	str	r2, [r4, #24]
 8003b06:	6922      	ldr	r2, [r4, #16]
 8003b08:	b942      	cbnz	r2, 8003b1c <__swsetup_r+0xa4>
 8003b0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b0e:	d1c5      	bne.n	8003a9c <__swsetup_r+0x24>
 8003b10:	bd38      	pop	{r3, r4, r5, pc}
 8003b12:	0799      	lsls	r1, r3, #30
 8003b14:	bf58      	it	pl
 8003b16:	6962      	ldrpl	r2, [r4, #20]
 8003b18:	60a2      	str	r2, [r4, #8]
 8003b1a:	e7f4      	b.n	8003b06 <__swsetup_r+0x8e>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	e7f7      	b.n	8003b10 <__swsetup_r+0x98>
 8003b20:	20000018 	.word	0x20000018

08003b24 <memset>:
 8003b24:	4402      	add	r2, r0
 8003b26:	4603      	mov	r3, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <_close_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4d06      	ldr	r5, [pc, #24]	@ (8003b50 <_close_r+0x1c>)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	602b      	str	r3, [r5, #0]
 8003b40:	f7fc fe57 	bl	80007f2 <_close>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d102      	bne.n	8003b4e <_close_r+0x1a>
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	b103      	cbz	r3, 8003b4e <_close_r+0x1a>
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	200002a0 	.word	0x200002a0

08003b54 <_lseek_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4d07      	ldr	r5, [pc, #28]	@ (8003b74 <_lseek_r+0x20>)
 8003b58:	4604      	mov	r4, r0
 8003b5a:	4608      	mov	r0, r1
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	602a      	str	r2, [r5, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fc fe6c 	bl	8000840 <_lseek>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_lseek_r+0x1e>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_lseek_r+0x1e>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	200002a0 	.word	0x200002a0

08003b78 <_read_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4d07      	ldr	r5, [pc, #28]	@ (8003b98 <_read_r+0x20>)
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	4608      	mov	r0, r1
 8003b80:	4611      	mov	r1, r2
 8003b82:	2200      	movs	r2, #0
 8003b84:	602a      	str	r2, [r5, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7fc fe16 	bl	80007b8 <_read>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d102      	bne.n	8003b96 <_read_r+0x1e>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	b103      	cbz	r3, 8003b96 <_read_r+0x1e>
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	200002a0 	.word	0x200002a0

08003b9c <_write_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4d07      	ldr	r5, [pc, #28]	@ (8003bbc <_write_r+0x20>)
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	4608      	mov	r0, r1
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	602a      	str	r2, [r5, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f7fc fc18 	bl	80003e0 <_write>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d102      	bne.n	8003bba <_write_r+0x1e>
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	b103      	cbz	r3, 8003bba <_write_r+0x1e>
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	200002a0 	.word	0x200002a0

08003bc0 <__errno>:
 8003bc0:	4b01      	ldr	r3, [pc, #4]	@ (8003bc8 <__errno+0x8>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000018 	.word	0x20000018

08003bcc <__libc_init_array>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	4d0d      	ldr	r5, [pc, #52]	@ (8003c04 <__libc_init_array+0x38>)
 8003bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8003c08 <__libc_init_array+0x3c>)
 8003bd2:	1b64      	subs	r4, r4, r5
 8003bd4:	10a4      	asrs	r4, r4, #2
 8003bd6:	2600      	movs	r6, #0
 8003bd8:	42a6      	cmp	r6, r4
 8003bda:	d109      	bne.n	8003bf0 <__libc_init_array+0x24>
 8003bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8003c0c <__libc_init_array+0x40>)
 8003bde:	4c0c      	ldr	r4, [pc, #48]	@ (8003c10 <__libc_init_array+0x44>)
 8003be0:	f000 fd2c 	bl	800463c <_init>
 8003be4:	1b64      	subs	r4, r4, r5
 8003be6:	10a4      	asrs	r4, r4, #2
 8003be8:	2600      	movs	r6, #0
 8003bea:	42a6      	cmp	r6, r4
 8003bec:	d105      	bne.n	8003bfa <__libc_init_array+0x2e>
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf4:	4798      	blx	r3
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7ee      	b.n	8003bd8 <__libc_init_array+0xc>
 8003bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfe:	4798      	blx	r3
 8003c00:	3601      	adds	r6, #1
 8003c02:	e7f2      	b.n	8003bea <__libc_init_array+0x1e>
 8003c04:	0800471c 	.word	0x0800471c
 8003c08:	0800471c 	.word	0x0800471c
 8003c0c:	0800471c 	.word	0x0800471c
 8003c10:	08004720 	.word	0x08004720

08003c14 <__retarget_lock_init_recursive>:
 8003c14:	4770      	bx	lr

08003c16 <__retarget_lock_acquire_recursive>:
 8003c16:	4770      	bx	lr

08003c18 <__retarget_lock_release_recursive>:
 8003c18:	4770      	bx	lr
	...

08003c1c <_free_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4605      	mov	r5, r0
 8003c20:	2900      	cmp	r1, #0
 8003c22:	d041      	beq.n	8003ca8 <_free_r+0x8c>
 8003c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c28:	1f0c      	subs	r4, r1, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bfb8      	it	lt
 8003c2e:	18e4      	addlt	r4, r4, r3
 8003c30:	f000 f8e8 	bl	8003e04 <__malloc_lock>
 8003c34:	4a1d      	ldr	r2, [pc, #116]	@ (8003cac <_free_r+0x90>)
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	b933      	cbnz	r3, 8003c48 <_free_r+0x2c>
 8003c3a:	6063      	str	r3, [r4, #4]
 8003c3c:	6014      	str	r4, [r2, #0]
 8003c3e:	4628      	mov	r0, r5
 8003c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c44:	f000 b8e4 	b.w	8003e10 <__malloc_unlock>
 8003c48:	42a3      	cmp	r3, r4
 8003c4a:	d908      	bls.n	8003c5e <_free_r+0x42>
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	1821      	adds	r1, r4, r0
 8003c50:	428b      	cmp	r3, r1
 8003c52:	bf01      	itttt	eq
 8003c54:	6819      	ldreq	r1, [r3, #0]
 8003c56:	685b      	ldreq	r3, [r3, #4]
 8003c58:	1809      	addeq	r1, r1, r0
 8003c5a:	6021      	streq	r1, [r4, #0]
 8003c5c:	e7ed      	b.n	8003c3a <_free_r+0x1e>
 8003c5e:	461a      	mov	r2, r3
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	b10b      	cbz	r3, 8003c68 <_free_r+0x4c>
 8003c64:	42a3      	cmp	r3, r4
 8003c66:	d9fa      	bls.n	8003c5e <_free_r+0x42>
 8003c68:	6811      	ldr	r1, [r2, #0]
 8003c6a:	1850      	adds	r0, r2, r1
 8003c6c:	42a0      	cmp	r0, r4
 8003c6e:	d10b      	bne.n	8003c88 <_free_r+0x6c>
 8003c70:	6820      	ldr	r0, [r4, #0]
 8003c72:	4401      	add	r1, r0
 8003c74:	1850      	adds	r0, r2, r1
 8003c76:	4283      	cmp	r3, r0
 8003c78:	6011      	str	r1, [r2, #0]
 8003c7a:	d1e0      	bne.n	8003c3e <_free_r+0x22>
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	6053      	str	r3, [r2, #4]
 8003c82:	4408      	add	r0, r1
 8003c84:	6010      	str	r0, [r2, #0]
 8003c86:	e7da      	b.n	8003c3e <_free_r+0x22>
 8003c88:	d902      	bls.n	8003c90 <_free_r+0x74>
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	e7d6      	b.n	8003c3e <_free_r+0x22>
 8003c90:	6820      	ldr	r0, [r4, #0]
 8003c92:	1821      	adds	r1, r4, r0
 8003c94:	428b      	cmp	r3, r1
 8003c96:	bf04      	itt	eq
 8003c98:	6819      	ldreq	r1, [r3, #0]
 8003c9a:	685b      	ldreq	r3, [r3, #4]
 8003c9c:	6063      	str	r3, [r4, #4]
 8003c9e:	bf04      	itt	eq
 8003ca0:	1809      	addeq	r1, r1, r0
 8003ca2:	6021      	streq	r1, [r4, #0]
 8003ca4:	6054      	str	r4, [r2, #4]
 8003ca6:	e7ca      	b.n	8003c3e <_free_r+0x22>
 8003ca8:	bd38      	pop	{r3, r4, r5, pc}
 8003caa:	bf00      	nop
 8003cac:	200002ac 	.word	0x200002ac

08003cb0 <malloc>:
 8003cb0:	4b02      	ldr	r3, [pc, #8]	@ (8003cbc <malloc+0xc>)
 8003cb2:	4601      	mov	r1, r0
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	f000 b825 	b.w	8003d04 <_malloc_r>
 8003cba:	bf00      	nop
 8003cbc:	20000018 	.word	0x20000018

08003cc0 <sbrk_aligned>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	4e0f      	ldr	r6, [pc, #60]	@ (8003d00 <sbrk_aligned+0x40>)
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	6831      	ldr	r1, [r6, #0]
 8003cc8:	4605      	mov	r5, r0
 8003cca:	b911      	cbnz	r1, 8003cd2 <sbrk_aligned+0x12>
 8003ccc:	f000 fca6 	bl	800461c <_sbrk_r>
 8003cd0:	6030      	str	r0, [r6, #0]
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 fca1 	bl	800461c <_sbrk_r>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d103      	bne.n	8003ce6 <sbrk_aligned+0x26>
 8003cde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
 8003ce6:	1cc4      	adds	r4, r0, #3
 8003ce8:	f024 0403 	bic.w	r4, r4, #3
 8003cec:	42a0      	cmp	r0, r4
 8003cee:	d0f8      	beq.n	8003ce2 <sbrk_aligned+0x22>
 8003cf0:	1a21      	subs	r1, r4, r0
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 fc92 	bl	800461c <_sbrk_r>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d1f2      	bne.n	8003ce2 <sbrk_aligned+0x22>
 8003cfc:	e7ef      	b.n	8003cde <sbrk_aligned+0x1e>
 8003cfe:	bf00      	nop
 8003d00:	200002a8 	.word	0x200002a8

08003d04 <_malloc_r>:
 8003d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d08:	1ccd      	adds	r5, r1, #3
 8003d0a:	f025 0503 	bic.w	r5, r5, #3
 8003d0e:	3508      	adds	r5, #8
 8003d10:	2d0c      	cmp	r5, #12
 8003d12:	bf38      	it	cc
 8003d14:	250c      	movcc	r5, #12
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	4606      	mov	r6, r0
 8003d1a:	db01      	blt.n	8003d20 <_malloc_r+0x1c>
 8003d1c:	42a9      	cmp	r1, r5
 8003d1e:	d904      	bls.n	8003d2a <_malloc_r+0x26>
 8003d20:	230c      	movs	r3, #12
 8003d22:	6033      	str	r3, [r6, #0]
 8003d24:	2000      	movs	r0, #0
 8003d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e00 <_malloc_r+0xfc>
 8003d2e:	f000 f869 	bl	8003e04 <__malloc_lock>
 8003d32:	f8d8 3000 	ldr.w	r3, [r8]
 8003d36:	461c      	mov	r4, r3
 8003d38:	bb44      	cbnz	r4, 8003d8c <_malloc_r+0x88>
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f7ff ffbf 	bl	8003cc0 <sbrk_aligned>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	4604      	mov	r4, r0
 8003d46:	d158      	bne.n	8003dfa <_malloc_r+0xf6>
 8003d48:	f8d8 4000 	ldr.w	r4, [r8]
 8003d4c:	4627      	mov	r7, r4
 8003d4e:	2f00      	cmp	r7, #0
 8003d50:	d143      	bne.n	8003dda <_malloc_r+0xd6>
 8003d52:	2c00      	cmp	r4, #0
 8003d54:	d04b      	beq.n	8003dee <_malloc_r+0xea>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	4639      	mov	r1, r7
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	eb04 0903 	add.w	r9, r4, r3
 8003d60:	f000 fc5c 	bl	800461c <_sbrk_r>
 8003d64:	4581      	cmp	r9, r0
 8003d66:	d142      	bne.n	8003dee <_malloc_r+0xea>
 8003d68:	6821      	ldr	r1, [r4, #0]
 8003d6a:	1a6d      	subs	r5, r5, r1
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	4630      	mov	r0, r6
 8003d70:	f7ff ffa6 	bl	8003cc0 <sbrk_aligned>
 8003d74:	3001      	adds	r0, #1
 8003d76:	d03a      	beq.n	8003dee <_malloc_r+0xea>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	442b      	add	r3, r5
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	bb62      	cbnz	r2, 8003de0 <_malloc_r+0xdc>
 8003d86:	f8c8 7000 	str.w	r7, [r8]
 8003d8a:	e00f      	b.n	8003dac <_malloc_r+0xa8>
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	1b52      	subs	r2, r2, r5
 8003d90:	d420      	bmi.n	8003dd4 <_malloc_r+0xd0>
 8003d92:	2a0b      	cmp	r2, #11
 8003d94:	d917      	bls.n	8003dc6 <_malloc_r+0xc2>
 8003d96:	1961      	adds	r1, r4, r5
 8003d98:	42a3      	cmp	r3, r4
 8003d9a:	6025      	str	r5, [r4, #0]
 8003d9c:	bf18      	it	ne
 8003d9e:	6059      	strne	r1, [r3, #4]
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	bf08      	it	eq
 8003da4:	f8c8 1000 	streq.w	r1, [r8]
 8003da8:	5162      	str	r2, [r4, r5]
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	4630      	mov	r0, r6
 8003dae:	f000 f82f 	bl	8003e10 <__malloc_unlock>
 8003db2:	f104 000b 	add.w	r0, r4, #11
 8003db6:	1d23      	adds	r3, r4, #4
 8003db8:	f020 0007 	bic.w	r0, r0, #7
 8003dbc:	1ac2      	subs	r2, r0, r3
 8003dbe:	bf1c      	itt	ne
 8003dc0:	1a1b      	subne	r3, r3, r0
 8003dc2:	50a3      	strne	r3, [r4, r2]
 8003dc4:	e7af      	b.n	8003d26 <_malloc_r+0x22>
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	42a3      	cmp	r3, r4
 8003dca:	bf0c      	ite	eq
 8003dcc:	f8c8 2000 	streq.w	r2, [r8]
 8003dd0:	605a      	strne	r2, [r3, #4]
 8003dd2:	e7eb      	b.n	8003dac <_malloc_r+0xa8>
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	6864      	ldr	r4, [r4, #4]
 8003dd8:	e7ae      	b.n	8003d38 <_malloc_r+0x34>
 8003dda:	463c      	mov	r4, r7
 8003ddc:	687f      	ldr	r7, [r7, #4]
 8003dde:	e7b6      	b.n	8003d4e <_malloc_r+0x4a>
 8003de0:	461a      	mov	r2, r3
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	d1fb      	bne.n	8003de0 <_malloc_r+0xdc>
 8003de8:	2300      	movs	r3, #0
 8003dea:	6053      	str	r3, [r2, #4]
 8003dec:	e7de      	b.n	8003dac <_malloc_r+0xa8>
 8003dee:	230c      	movs	r3, #12
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	4630      	mov	r0, r6
 8003df4:	f000 f80c 	bl	8003e10 <__malloc_unlock>
 8003df8:	e794      	b.n	8003d24 <_malloc_r+0x20>
 8003dfa:	6005      	str	r5, [r0, #0]
 8003dfc:	e7d6      	b.n	8003dac <_malloc_r+0xa8>
 8003dfe:	bf00      	nop
 8003e00:	200002ac 	.word	0x200002ac

08003e04 <__malloc_lock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	@ (8003e0c <__malloc_lock+0x8>)
 8003e06:	f7ff bf06 	b.w	8003c16 <__retarget_lock_acquire_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	200002a4 	.word	0x200002a4

08003e10 <__malloc_unlock>:
 8003e10:	4801      	ldr	r0, [pc, #4]	@ (8003e18 <__malloc_unlock+0x8>)
 8003e12:	f7ff bf01 	b.w	8003c18 <__retarget_lock_release_recursive>
 8003e16:	bf00      	nop
 8003e18:	200002a4 	.word	0x200002a4

08003e1c <__sfputc_r>:
 8003e1c:	6893      	ldr	r3, [r2, #8]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	b410      	push	{r4}
 8003e24:	6093      	str	r3, [r2, #8]
 8003e26:	da08      	bge.n	8003e3a <__sfputc_r+0x1e>
 8003e28:	6994      	ldr	r4, [r2, #24]
 8003e2a:	42a3      	cmp	r3, r4
 8003e2c:	db01      	blt.n	8003e32 <__sfputc_r+0x16>
 8003e2e:	290a      	cmp	r1, #10
 8003e30:	d103      	bne.n	8003e3a <__sfputc_r+0x1e>
 8003e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e36:	f7ff bde0 	b.w	80039fa <__swbuf_r>
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	1c58      	adds	r0, r3, #1
 8003e3e:	6010      	str	r0, [r2, #0]
 8003e40:	7019      	strb	r1, [r3, #0]
 8003e42:	4608      	mov	r0, r1
 8003e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <__sfputs_r>:
 8003e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4c:	4606      	mov	r6, r0
 8003e4e:	460f      	mov	r7, r1
 8003e50:	4614      	mov	r4, r2
 8003e52:	18d5      	adds	r5, r2, r3
 8003e54:	42ac      	cmp	r4, r5
 8003e56:	d101      	bne.n	8003e5c <__sfputs_r+0x12>
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e007      	b.n	8003e6c <__sfputs_r+0x22>
 8003e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e60:	463a      	mov	r2, r7
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7ff ffda 	bl	8003e1c <__sfputc_r>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	d1f3      	bne.n	8003e54 <__sfputs_r+0xa>
 8003e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e70 <_vfiprintf_r>:
 8003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e74:	460d      	mov	r5, r1
 8003e76:	b09d      	sub	sp, #116	@ 0x74
 8003e78:	4614      	mov	r4, r2
 8003e7a:	4698      	mov	r8, r3
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	b118      	cbz	r0, 8003e88 <_vfiprintf_r+0x18>
 8003e80:	6a03      	ldr	r3, [r0, #32]
 8003e82:	b90b      	cbnz	r3, 8003e88 <_vfiprintf_r+0x18>
 8003e84:	f7ff fc14 	bl	80036b0 <__sinit>
 8003e88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e8a:	07d9      	lsls	r1, r3, #31
 8003e8c:	d405      	bmi.n	8003e9a <_vfiprintf_r+0x2a>
 8003e8e:	89ab      	ldrh	r3, [r5, #12]
 8003e90:	059a      	lsls	r2, r3, #22
 8003e92:	d402      	bmi.n	8003e9a <_vfiprintf_r+0x2a>
 8003e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e96:	f7ff febe 	bl	8003c16 <__retarget_lock_acquire_recursive>
 8003e9a:	89ab      	ldrh	r3, [r5, #12]
 8003e9c:	071b      	lsls	r3, r3, #28
 8003e9e:	d501      	bpl.n	8003ea4 <_vfiprintf_r+0x34>
 8003ea0:	692b      	ldr	r3, [r5, #16]
 8003ea2:	b99b      	cbnz	r3, 8003ecc <_vfiprintf_r+0x5c>
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f7ff fde6 	bl	8003a78 <__swsetup_r>
 8003eac:	b170      	cbz	r0, 8003ecc <_vfiprintf_r+0x5c>
 8003eae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003eb0:	07dc      	lsls	r4, r3, #31
 8003eb2:	d504      	bpl.n	8003ebe <_vfiprintf_r+0x4e>
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003eb8:	b01d      	add	sp, #116	@ 0x74
 8003eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	0598      	lsls	r0, r3, #22
 8003ec2:	d4f7      	bmi.n	8003eb4 <_vfiprintf_r+0x44>
 8003ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ec6:	f7ff fea7 	bl	8003c18 <__retarget_lock_release_recursive>
 8003eca:	e7f3      	b.n	8003eb4 <_vfiprintf_r+0x44>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eda:	2330      	movs	r3, #48	@ 0x30
 8003edc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800408c <_vfiprintf_r+0x21c>
 8003ee0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ee4:	f04f 0901 	mov.w	r9, #1
 8003ee8:	4623      	mov	r3, r4
 8003eea:	469a      	mov	sl, r3
 8003eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ef0:	b10a      	cbz	r2, 8003ef6 <_vfiprintf_r+0x86>
 8003ef2:	2a25      	cmp	r2, #37	@ 0x25
 8003ef4:	d1f9      	bne.n	8003eea <_vfiprintf_r+0x7a>
 8003ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8003efa:	d00b      	beq.n	8003f14 <_vfiprintf_r+0xa4>
 8003efc:	465b      	mov	r3, fp
 8003efe:	4622      	mov	r2, r4
 8003f00:	4629      	mov	r1, r5
 8003f02:	4630      	mov	r0, r6
 8003f04:	f7ff ffa1 	bl	8003e4a <__sfputs_r>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	f000 80a7 	beq.w	800405c <_vfiprintf_r+0x1ec>
 8003f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f10:	445a      	add	r2, fp
 8003f12:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f14:	f89a 3000 	ldrb.w	r3, [sl]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 809f 	beq.w	800405c <_vfiprintf_r+0x1ec>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f28:	f10a 0a01 	add.w	sl, sl, #1
 8003f2c:	9304      	str	r3, [sp, #16]
 8003f2e:	9307      	str	r3, [sp, #28]
 8003f30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f34:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f36:	4654      	mov	r4, sl
 8003f38:	2205      	movs	r2, #5
 8003f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f3e:	4853      	ldr	r0, [pc, #332]	@ (800408c <_vfiprintf_r+0x21c>)
 8003f40:	f7fc f946 	bl	80001d0 <memchr>
 8003f44:	9a04      	ldr	r2, [sp, #16]
 8003f46:	b9d8      	cbnz	r0, 8003f80 <_vfiprintf_r+0x110>
 8003f48:	06d1      	lsls	r1, r2, #27
 8003f4a:	bf44      	itt	mi
 8003f4c:	2320      	movmi	r3, #32
 8003f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f52:	0713      	lsls	r3, r2, #28
 8003f54:	bf44      	itt	mi
 8003f56:	232b      	movmi	r3, #43	@ 0x2b
 8003f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f62:	d015      	beq.n	8003f90 <_vfiprintf_r+0x120>
 8003f64:	9a07      	ldr	r2, [sp, #28]
 8003f66:	4654      	mov	r4, sl
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f04f 0c0a 	mov.w	ip, #10
 8003f6e:	4621      	mov	r1, r4
 8003f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f74:	3b30      	subs	r3, #48	@ 0x30
 8003f76:	2b09      	cmp	r3, #9
 8003f78:	d94b      	bls.n	8004012 <_vfiprintf_r+0x1a2>
 8003f7a:	b1b0      	cbz	r0, 8003faa <_vfiprintf_r+0x13a>
 8003f7c:	9207      	str	r2, [sp, #28]
 8003f7e:	e014      	b.n	8003faa <_vfiprintf_r+0x13a>
 8003f80:	eba0 0308 	sub.w	r3, r0, r8
 8003f84:	fa09 f303 	lsl.w	r3, r9, r3
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	9304      	str	r3, [sp, #16]
 8003f8c:	46a2      	mov	sl, r4
 8003f8e:	e7d2      	b.n	8003f36 <_vfiprintf_r+0xc6>
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	1d19      	adds	r1, r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	9103      	str	r1, [sp, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bfbb      	ittet	lt
 8003f9c:	425b      	neglt	r3, r3
 8003f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8003fa2:	9307      	strge	r3, [sp, #28]
 8003fa4:	9307      	strlt	r3, [sp, #28]
 8003fa6:	bfb8      	it	lt
 8003fa8:	9204      	strlt	r2, [sp, #16]
 8003faa:	7823      	ldrb	r3, [r4, #0]
 8003fac:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fae:	d10a      	bne.n	8003fc6 <_vfiprintf_r+0x156>
 8003fb0:	7863      	ldrb	r3, [r4, #1]
 8003fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fb4:	d132      	bne.n	800401c <_vfiprintf_r+0x1ac>
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	1d1a      	adds	r2, r3, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	9203      	str	r2, [sp, #12]
 8003fbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003fc2:	3402      	adds	r4, #2
 8003fc4:	9305      	str	r3, [sp, #20]
 8003fc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800409c <_vfiprintf_r+0x22c>
 8003fca:	7821      	ldrb	r1, [r4, #0]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	4650      	mov	r0, sl
 8003fd0:	f7fc f8fe 	bl	80001d0 <memchr>
 8003fd4:	b138      	cbz	r0, 8003fe6 <_vfiprintf_r+0x176>
 8003fd6:	9b04      	ldr	r3, [sp, #16]
 8003fd8:	eba0 000a 	sub.w	r0, r0, sl
 8003fdc:	2240      	movs	r2, #64	@ 0x40
 8003fde:	4082      	lsls	r2, r0
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	3401      	adds	r4, #1
 8003fe4:	9304      	str	r3, [sp, #16]
 8003fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fea:	4829      	ldr	r0, [pc, #164]	@ (8004090 <_vfiprintf_r+0x220>)
 8003fec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ff0:	2206      	movs	r2, #6
 8003ff2:	f7fc f8ed 	bl	80001d0 <memchr>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d03f      	beq.n	800407a <_vfiprintf_r+0x20a>
 8003ffa:	4b26      	ldr	r3, [pc, #152]	@ (8004094 <_vfiprintf_r+0x224>)
 8003ffc:	bb1b      	cbnz	r3, 8004046 <_vfiprintf_r+0x1d6>
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	3307      	adds	r3, #7
 8004002:	f023 0307 	bic.w	r3, r3, #7
 8004006:	3308      	adds	r3, #8
 8004008:	9303      	str	r3, [sp, #12]
 800400a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800400c:	443b      	add	r3, r7
 800400e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004010:	e76a      	b.n	8003ee8 <_vfiprintf_r+0x78>
 8004012:	fb0c 3202 	mla	r2, ip, r2, r3
 8004016:	460c      	mov	r4, r1
 8004018:	2001      	movs	r0, #1
 800401a:	e7a8      	b.n	8003f6e <_vfiprintf_r+0xfe>
 800401c:	2300      	movs	r3, #0
 800401e:	3401      	adds	r4, #1
 8004020:	9305      	str	r3, [sp, #20]
 8004022:	4619      	mov	r1, r3
 8004024:	f04f 0c0a 	mov.w	ip, #10
 8004028:	4620      	mov	r0, r4
 800402a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800402e:	3a30      	subs	r2, #48	@ 0x30
 8004030:	2a09      	cmp	r2, #9
 8004032:	d903      	bls.n	800403c <_vfiprintf_r+0x1cc>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0c6      	beq.n	8003fc6 <_vfiprintf_r+0x156>
 8004038:	9105      	str	r1, [sp, #20]
 800403a:	e7c4      	b.n	8003fc6 <_vfiprintf_r+0x156>
 800403c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004040:	4604      	mov	r4, r0
 8004042:	2301      	movs	r3, #1
 8004044:	e7f0      	b.n	8004028 <_vfiprintf_r+0x1b8>
 8004046:	ab03      	add	r3, sp, #12
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	462a      	mov	r2, r5
 800404c:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <_vfiprintf_r+0x228>)
 800404e:	a904      	add	r1, sp, #16
 8004050:	4630      	mov	r0, r6
 8004052:	f3af 8000 	nop.w
 8004056:	4607      	mov	r7, r0
 8004058:	1c78      	adds	r0, r7, #1
 800405a:	d1d6      	bne.n	800400a <_vfiprintf_r+0x19a>
 800405c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800405e:	07d9      	lsls	r1, r3, #31
 8004060:	d405      	bmi.n	800406e <_vfiprintf_r+0x1fe>
 8004062:	89ab      	ldrh	r3, [r5, #12]
 8004064:	059a      	lsls	r2, r3, #22
 8004066:	d402      	bmi.n	800406e <_vfiprintf_r+0x1fe>
 8004068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800406a:	f7ff fdd5 	bl	8003c18 <__retarget_lock_release_recursive>
 800406e:	89ab      	ldrh	r3, [r5, #12]
 8004070:	065b      	lsls	r3, r3, #25
 8004072:	f53f af1f 	bmi.w	8003eb4 <_vfiprintf_r+0x44>
 8004076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004078:	e71e      	b.n	8003eb8 <_vfiprintf_r+0x48>
 800407a:	ab03      	add	r3, sp, #12
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	462a      	mov	r2, r5
 8004080:	4b05      	ldr	r3, [pc, #20]	@ (8004098 <_vfiprintf_r+0x228>)
 8004082:	a904      	add	r1, sp, #16
 8004084:	4630      	mov	r0, r6
 8004086:	f000 f879 	bl	800417c <_printf_i>
 800408a:	e7e4      	b.n	8004056 <_vfiprintf_r+0x1e6>
 800408c:	080046e0 	.word	0x080046e0
 8004090:	080046ea 	.word	0x080046ea
 8004094:	00000000 	.word	0x00000000
 8004098:	08003e4b 	.word	0x08003e4b
 800409c:	080046e6 	.word	0x080046e6

080040a0 <_printf_common>:
 80040a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a4:	4616      	mov	r6, r2
 80040a6:	4698      	mov	r8, r3
 80040a8:	688a      	ldr	r2, [r1, #8]
 80040aa:	690b      	ldr	r3, [r1, #16]
 80040ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bfb8      	it	lt
 80040b4:	4613      	movlt	r3, r2
 80040b6:	6033      	str	r3, [r6, #0]
 80040b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040bc:	4607      	mov	r7, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	b10a      	cbz	r2, 80040c6 <_printf_common+0x26>
 80040c2:	3301      	adds	r3, #1
 80040c4:	6033      	str	r3, [r6, #0]
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	0699      	lsls	r1, r3, #26
 80040ca:	bf42      	ittt	mi
 80040cc:	6833      	ldrmi	r3, [r6, #0]
 80040ce:	3302      	addmi	r3, #2
 80040d0:	6033      	strmi	r3, [r6, #0]
 80040d2:	6825      	ldr	r5, [r4, #0]
 80040d4:	f015 0506 	ands.w	r5, r5, #6
 80040d8:	d106      	bne.n	80040e8 <_printf_common+0x48>
 80040da:	f104 0a19 	add.w	sl, r4, #25
 80040de:	68e3      	ldr	r3, [r4, #12]
 80040e0:	6832      	ldr	r2, [r6, #0]
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	42ab      	cmp	r3, r5
 80040e6:	dc26      	bgt.n	8004136 <_printf_common+0x96>
 80040e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	3b00      	subs	r3, #0
 80040f0:	bf18      	it	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	0692      	lsls	r2, r2, #26
 80040f6:	d42b      	bmi.n	8004150 <_printf_common+0xb0>
 80040f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040fc:	4641      	mov	r1, r8
 80040fe:	4638      	mov	r0, r7
 8004100:	47c8      	blx	r9
 8004102:	3001      	adds	r0, #1
 8004104:	d01e      	beq.n	8004144 <_printf_common+0xa4>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	6922      	ldr	r2, [r4, #16]
 800410a:	f003 0306 	and.w	r3, r3, #6
 800410e:	2b04      	cmp	r3, #4
 8004110:	bf02      	ittt	eq
 8004112:	68e5      	ldreq	r5, [r4, #12]
 8004114:	6833      	ldreq	r3, [r6, #0]
 8004116:	1aed      	subeq	r5, r5, r3
 8004118:	68a3      	ldr	r3, [r4, #8]
 800411a:	bf0c      	ite	eq
 800411c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004120:	2500      	movne	r5, #0
 8004122:	4293      	cmp	r3, r2
 8004124:	bfc4      	itt	gt
 8004126:	1a9b      	subgt	r3, r3, r2
 8004128:	18ed      	addgt	r5, r5, r3
 800412a:	2600      	movs	r6, #0
 800412c:	341a      	adds	r4, #26
 800412e:	42b5      	cmp	r5, r6
 8004130:	d11a      	bne.n	8004168 <_printf_common+0xc8>
 8004132:	2000      	movs	r0, #0
 8004134:	e008      	b.n	8004148 <_printf_common+0xa8>
 8004136:	2301      	movs	r3, #1
 8004138:	4652      	mov	r2, sl
 800413a:	4641      	mov	r1, r8
 800413c:	4638      	mov	r0, r7
 800413e:	47c8      	blx	r9
 8004140:	3001      	adds	r0, #1
 8004142:	d103      	bne.n	800414c <_printf_common+0xac>
 8004144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800414c:	3501      	adds	r5, #1
 800414e:	e7c6      	b.n	80040de <_printf_common+0x3e>
 8004150:	18e1      	adds	r1, r4, r3
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	2030      	movs	r0, #48	@ 0x30
 8004156:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800415a:	4422      	add	r2, r4
 800415c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004160:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004164:	3302      	adds	r3, #2
 8004166:	e7c7      	b.n	80040f8 <_printf_common+0x58>
 8004168:	2301      	movs	r3, #1
 800416a:	4622      	mov	r2, r4
 800416c:	4641      	mov	r1, r8
 800416e:	4638      	mov	r0, r7
 8004170:	47c8      	blx	r9
 8004172:	3001      	adds	r0, #1
 8004174:	d0e6      	beq.n	8004144 <_printf_common+0xa4>
 8004176:	3601      	adds	r6, #1
 8004178:	e7d9      	b.n	800412e <_printf_common+0x8e>
	...

0800417c <_printf_i>:
 800417c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	7e0f      	ldrb	r7, [r1, #24]
 8004182:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004184:	2f78      	cmp	r7, #120	@ 0x78
 8004186:	4691      	mov	r9, r2
 8004188:	4680      	mov	r8, r0
 800418a:	460c      	mov	r4, r1
 800418c:	469a      	mov	sl, r3
 800418e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004192:	d807      	bhi.n	80041a4 <_printf_i+0x28>
 8004194:	2f62      	cmp	r7, #98	@ 0x62
 8004196:	d80a      	bhi.n	80041ae <_printf_i+0x32>
 8004198:	2f00      	cmp	r7, #0
 800419a:	f000 80d2 	beq.w	8004342 <_printf_i+0x1c6>
 800419e:	2f58      	cmp	r7, #88	@ 0x58
 80041a0:	f000 80b9 	beq.w	8004316 <_printf_i+0x19a>
 80041a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041ac:	e03a      	b.n	8004224 <_printf_i+0xa8>
 80041ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041b2:	2b15      	cmp	r3, #21
 80041b4:	d8f6      	bhi.n	80041a4 <_printf_i+0x28>
 80041b6:	a101      	add	r1, pc, #4	@ (adr r1, 80041bc <_printf_i+0x40>)
 80041b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041bc:	08004215 	.word	0x08004215
 80041c0:	08004229 	.word	0x08004229
 80041c4:	080041a5 	.word	0x080041a5
 80041c8:	080041a5 	.word	0x080041a5
 80041cc:	080041a5 	.word	0x080041a5
 80041d0:	080041a5 	.word	0x080041a5
 80041d4:	08004229 	.word	0x08004229
 80041d8:	080041a5 	.word	0x080041a5
 80041dc:	080041a5 	.word	0x080041a5
 80041e0:	080041a5 	.word	0x080041a5
 80041e4:	080041a5 	.word	0x080041a5
 80041e8:	08004329 	.word	0x08004329
 80041ec:	08004253 	.word	0x08004253
 80041f0:	080042e3 	.word	0x080042e3
 80041f4:	080041a5 	.word	0x080041a5
 80041f8:	080041a5 	.word	0x080041a5
 80041fc:	0800434b 	.word	0x0800434b
 8004200:	080041a5 	.word	0x080041a5
 8004204:	08004253 	.word	0x08004253
 8004208:	080041a5 	.word	0x080041a5
 800420c:	080041a5 	.word	0x080041a5
 8004210:	080042eb 	.word	0x080042eb
 8004214:	6833      	ldr	r3, [r6, #0]
 8004216:	1d1a      	adds	r2, r3, #4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6032      	str	r2, [r6, #0]
 800421c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004220:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004224:	2301      	movs	r3, #1
 8004226:	e09d      	b.n	8004364 <_printf_i+0x1e8>
 8004228:	6833      	ldr	r3, [r6, #0]
 800422a:	6820      	ldr	r0, [r4, #0]
 800422c:	1d19      	adds	r1, r3, #4
 800422e:	6031      	str	r1, [r6, #0]
 8004230:	0606      	lsls	r6, r0, #24
 8004232:	d501      	bpl.n	8004238 <_printf_i+0xbc>
 8004234:	681d      	ldr	r5, [r3, #0]
 8004236:	e003      	b.n	8004240 <_printf_i+0xc4>
 8004238:	0645      	lsls	r5, r0, #25
 800423a:	d5fb      	bpl.n	8004234 <_printf_i+0xb8>
 800423c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004240:	2d00      	cmp	r5, #0
 8004242:	da03      	bge.n	800424c <_printf_i+0xd0>
 8004244:	232d      	movs	r3, #45	@ 0x2d
 8004246:	426d      	negs	r5, r5
 8004248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800424c:	4859      	ldr	r0, [pc, #356]	@ (80043b4 <_printf_i+0x238>)
 800424e:	230a      	movs	r3, #10
 8004250:	e011      	b.n	8004276 <_printf_i+0xfa>
 8004252:	6821      	ldr	r1, [r4, #0]
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	0608      	lsls	r0, r1, #24
 8004258:	f853 5b04 	ldr.w	r5, [r3], #4
 800425c:	d402      	bmi.n	8004264 <_printf_i+0xe8>
 800425e:	0649      	lsls	r1, r1, #25
 8004260:	bf48      	it	mi
 8004262:	b2ad      	uxthmi	r5, r5
 8004264:	2f6f      	cmp	r7, #111	@ 0x6f
 8004266:	4853      	ldr	r0, [pc, #332]	@ (80043b4 <_printf_i+0x238>)
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	bf14      	ite	ne
 800426c:	230a      	movne	r3, #10
 800426e:	2308      	moveq	r3, #8
 8004270:	2100      	movs	r1, #0
 8004272:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004276:	6866      	ldr	r6, [r4, #4]
 8004278:	60a6      	str	r6, [r4, #8]
 800427a:	2e00      	cmp	r6, #0
 800427c:	bfa2      	ittt	ge
 800427e:	6821      	ldrge	r1, [r4, #0]
 8004280:	f021 0104 	bicge.w	r1, r1, #4
 8004284:	6021      	strge	r1, [r4, #0]
 8004286:	b90d      	cbnz	r5, 800428c <_printf_i+0x110>
 8004288:	2e00      	cmp	r6, #0
 800428a:	d04b      	beq.n	8004324 <_printf_i+0x1a8>
 800428c:	4616      	mov	r6, r2
 800428e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004292:	fb03 5711 	mls	r7, r3, r1, r5
 8004296:	5dc7      	ldrb	r7, [r0, r7]
 8004298:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800429c:	462f      	mov	r7, r5
 800429e:	42bb      	cmp	r3, r7
 80042a0:	460d      	mov	r5, r1
 80042a2:	d9f4      	bls.n	800428e <_printf_i+0x112>
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d10b      	bne.n	80042c0 <_printf_i+0x144>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	07df      	lsls	r7, r3, #31
 80042ac:	d508      	bpl.n	80042c0 <_printf_i+0x144>
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	6861      	ldr	r1, [r4, #4]
 80042b2:	4299      	cmp	r1, r3
 80042b4:	bfde      	ittt	le
 80042b6:	2330      	movle	r3, #48	@ 0x30
 80042b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042bc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80042c0:	1b92      	subs	r2, r2, r6
 80042c2:	6122      	str	r2, [r4, #16]
 80042c4:	f8cd a000 	str.w	sl, [sp]
 80042c8:	464b      	mov	r3, r9
 80042ca:	aa03      	add	r2, sp, #12
 80042cc:	4621      	mov	r1, r4
 80042ce:	4640      	mov	r0, r8
 80042d0:	f7ff fee6 	bl	80040a0 <_printf_common>
 80042d4:	3001      	adds	r0, #1
 80042d6:	d14a      	bne.n	800436e <_printf_i+0x1f2>
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042dc:	b004      	add	sp, #16
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	f043 0320 	orr.w	r3, r3, #32
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	4833      	ldr	r0, [pc, #204]	@ (80043b8 <_printf_i+0x23c>)
 80042ec:	2778      	movs	r7, #120	@ 0x78
 80042ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	6831      	ldr	r1, [r6, #0]
 80042f6:	061f      	lsls	r7, r3, #24
 80042f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80042fc:	d402      	bmi.n	8004304 <_printf_i+0x188>
 80042fe:	065f      	lsls	r7, r3, #25
 8004300:	bf48      	it	mi
 8004302:	b2ad      	uxthmi	r5, r5
 8004304:	6031      	str	r1, [r6, #0]
 8004306:	07d9      	lsls	r1, r3, #31
 8004308:	bf44      	itt	mi
 800430a:	f043 0320 	orrmi.w	r3, r3, #32
 800430e:	6023      	strmi	r3, [r4, #0]
 8004310:	b11d      	cbz	r5, 800431a <_printf_i+0x19e>
 8004312:	2310      	movs	r3, #16
 8004314:	e7ac      	b.n	8004270 <_printf_i+0xf4>
 8004316:	4827      	ldr	r0, [pc, #156]	@ (80043b4 <_printf_i+0x238>)
 8004318:	e7e9      	b.n	80042ee <_printf_i+0x172>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	f023 0320 	bic.w	r3, r3, #32
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	e7f6      	b.n	8004312 <_printf_i+0x196>
 8004324:	4616      	mov	r6, r2
 8004326:	e7bd      	b.n	80042a4 <_printf_i+0x128>
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	6825      	ldr	r5, [r4, #0]
 800432c:	6961      	ldr	r1, [r4, #20]
 800432e:	1d18      	adds	r0, r3, #4
 8004330:	6030      	str	r0, [r6, #0]
 8004332:	062e      	lsls	r6, r5, #24
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	d501      	bpl.n	800433c <_printf_i+0x1c0>
 8004338:	6019      	str	r1, [r3, #0]
 800433a:	e002      	b.n	8004342 <_printf_i+0x1c6>
 800433c:	0668      	lsls	r0, r5, #25
 800433e:	d5fb      	bpl.n	8004338 <_printf_i+0x1bc>
 8004340:	8019      	strh	r1, [r3, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	6123      	str	r3, [r4, #16]
 8004346:	4616      	mov	r6, r2
 8004348:	e7bc      	b.n	80042c4 <_printf_i+0x148>
 800434a:	6833      	ldr	r3, [r6, #0]
 800434c:	1d1a      	adds	r2, r3, #4
 800434e:	6032      	str	r2, [r6, #0]
 8004350:	681e      	ldr	r6, [r3, #0]
 8004352:	6862      	ldr	r2, [r4, #4]
 8004354:	2100      	movs	r1, #0
 8004356:	4630      	mov	r0, r6
 8004358:	f7fb ff3a 	bl	80001d0 <memchr>
 800435c:	b108      	cbz	r0, 8004362 <_printf_i+0x1e6>
 800435e:	1b80      	subs	r0, r0, r6
 8004360:	6060      	str	r0, [r4, #4]
 8004362:	6863      	ldr	r3, [r4, #4]
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	2300      	movs	r3, #0
 8004368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800436c:	e7aa      	b.n	80042c4 <_printf_i+0x148>
 800436e:	6923      	ldr	r3, [r4, #16]
 8004370:	4632      	mov	r2, r6
 8004372:	4649      	mov	r1, r9
 8004374:	4640      	mov	r0, r8
 8004376:	47d0      	blx	sl
 8004378:	3001      	adds	r0, #1
 800437a:	d0ad      	beq.n	80042d8 <_printf_i+0x15c>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	079b      	lsls	r3, r3, #30
 8004380:	d413      	bmi.n	80043aa <_printf_i+0x22e>
 8004382:	68e0      	ldr	r0, [r4, #12]
 8004384:	9b03      	ldr	r3, [sp, #12]
 8004386:	4298      	cmp	r0, r3
 8004388:	bfb8      	it	lt
 800438a:	4618      	movlt	r0, r3
 800438c:	e7a6      	b.n	80042dc <_printf_i+0x160>
 800438e:	2301      	movs	r3, #1
 8004390:	4632      	mov	r2, r6
 8004392:	4649      	mov	r1, r9
 8004394:	4640      	mov	r0, r8
 8004396:	47d0      	blx	sl
 8004398:	3001      	adds	r0, #1
 800439a:	d09d      	beq.n	80042d8 <_printf_i+0x15c>
 800439c:	3501      	adds	r5, #1
 800439e:	68e3      	ldr	r3, [r4, #12]
 80043a0:	9903      	ldr	r1, [sp, #12]
 80043a2:	1a5b      	subs	r3, r3, r1
 80043a4:	42ab      	cmp	r3, r5
 80043a6:	dcf2      	bgt.n	800438e <_printf_i+0x212>
 80043a8:	e7eb      	b.n	8004382 <_printf_i+0x206>
 80043aa:	2500      	movs	r5, #0
 80043ac:	f104 0619 	add.w	r6, r4, #25
 80043b0:	e7f5      	b.n	800439e <_printf_i+0x222>
 80043b2:	bf00      	nop
 80043b4:	080046f1 	.word	0x080046f1
 80043b8:	08004702 	.word	0x08004702

080043bc <__sflush_r>:
 80043bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c4:	0716      	lsls	r6, r2, #28
 80043c6:	4605      	mov	r5, r0
 80043c8:	460c      	mov	r4, r1
 80043ca:	d454      	bmi.n	8004476 <__sflush_r+0xba>
 80043cc:	684b      	ldr	r3, [r1, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	dc02      	bgt.n	80043d8 <__sflush_r+0x1c>
 80043d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	dd48      	ble.n	800446a <__sflush_r+0xae>
 80043d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043da:	2e00      	cmp	r6, #0
 80043dc:	d045      	beq.n	800446a <__sflush_r+0xae>
 80043de:	2300      	movs	r3, #0
 80043e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80043e4:	682f      	ldr	r7, [r5, #0]
 80043e6:	6a21      	ldr	r1, [r4, #32]
 80043e8:	602b      	str	r3, [r5, #0]
 80043ea:	d030      	beq.n	800444e <__sflush_r+0x92>
 80043ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	0759      	lsls	r1, r3, #29
 80043f2:	d505      	bpl.n	8004400 <__sflush_r+0x44>
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80043fa:	b10b      	cbz	r3, 8004400 <__sflush_r+0x44>
 80043fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043fe:	1ad2      	subs	r2, r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004404:	6a21      	ldr	r1, [r4, #32]
 8004406:	4628      	mov	r0, r5
 8004408:	47b0      	blx	r6
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	89a3      	ldrh	r3, [r4, #12]
 800440e:	d106      	bne.n	800441e <__sflush_r+0x62>
 8004410:	6829      	ldr	r1, [r5, #0]
 8004412:	291d      	cmp	r1, #29
 8004414:	d82b      	bhi.n	800446e <__sflush_r+0xb2>
 8004416:	4a2a      	ldr	r2, [pc, #168]	@ (80044c0 <__sflush_r+0x104>)
 8004418:	410a      	asrs	r2, r1
 800441a:	07d6      	lsls	r6, r2, #31
 800441c:	d427      	bmi.n	800446e <__sflush_r+0xb2>
 800441e:	2200      	movs	r2, #0
 8004420:	6062      	str	r2, [r4, #4]
 8004422:	04d9      	lsls	r1, r3, #19
 8004424:	6922      	ldr	r2, [r4, #16]
 8004426:	6022      	str	r2, [r4, #0]
 8004428:	d504      	bpl.n	8004434 <__sflush_r+0x78>
 800442a:	1c42      	adds	r2, r0, #1
 800442c:	d101      	bne.n	8004432 <__sflush_r+0x76>
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	b903      	cbnz	r3, 8004434 <__sflush_r+0x78>
 8004432:	6560      	str	r0, [r4, #84]	@ 0x54
 8004434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004436:	602f      	str	r7, [r5, #0]
 8004438:	b1b9      	cbz	r1, 800446a <__sflush_r+0xae>
 800443a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800443e:	4299      	cmp	r1, r3
 8004440:	d002      	beq.n	8004448 <__sflush_r+0x8c>
 8004442:	4628      	mov	r0, r5
 8004444:	f7ff fbea 	bl	8003c1c <_free_r>
 8004448:	2300      	movs	r3, #0
 800444a:	6363      	str	r3, [r4, #52]	@ 0x34
 800444c:	e00d      	b.n	800446a <__sflush_r+0xae>
 800444e:	2301      	movs	r3, #1
 8004450:	4628      	mov	r0, r5
 8004452:	47b0      	blx	r6
 8004454:	4602      	mov	r2, r0
 8004456:	1c50      	adds	r0, r2, #1
 8004458:	d1c9      	bne.n	80043ee <__sflush_r+0x32>
 800445a:	682b      	ldr	r3, [r5, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0c6      	beq.n	80043ee <__sflush_r+0x32>
 8004460:	2b1d      	cmp	r3, #29
 8004462:	d001      	beq.n	8004468 <__sflush_r+0xac>
 8004464:	2b16      	cmp	r3, #22
 8004466:	d11e      	bne.n	80044a6 <__sflush_r+0xea>
 8004468:	602f      	str	r7, [r5, #0]
 800446a:	2000      	movs	r0, #0
 800446c:	e022      	b.n	80044b4 <__sflush_r+0xf8>
 800446e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004472:	b21b      	sxth	r3, r3
 8004474:	e01b      	b.n	80044ae <__sflush_r+0xf2>
 8004476:	690f      	ldr	r7, [r1, #16]
 8004478:	2f00      	cmp	r7, #0
 800447a:	d0f6      	beq.n	800446a <__sflush_r+0xae>
 800447c:	0793      	lsls	r3, r2, #30
 800447e:	680e      	ldr	r6, [r1, #0]
 8004480:	bf08      	it	eq
 8004482:	694b      	ldreq	r3, [r1, #20]
 8004484:	600f      	str	r7, [r1, #0]
 8004486:	bf18      	it	ne
 8004488:	2300      	movne	r3, #0
 800448a:	eba6 0807 	sub.w	r8, r6, r7
 800448e:	608b      	str	r3, [r1, #8]
 8004490:	f1b8 0f00 	cmp.w	r8, #0
 8004494:	dde9      	ble.n	800446a <__sflush_r+0xae>
 8004496:	6a21      	ldr	r1, [r4, #32]
 8004498:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800449a:	4643      	mov	r3, r8
 800449c:	463a      	mov	r2, r7
 800449e:	4628      	mov	r0, r5
 80044a0:	47b0      	blx	r6
 80044a2:	2800      	cmp	r0, #0
 80044a4:	dc08      	bgt.n	80044b8 <__sflush_r+0xfc>
 80044a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ae:	81a3      	strh	r3, [r4, #12]
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b8:	4407      	add	r7, r0
 80044ba:	eba8 0800 	sub.w	r8, r8, r0
 80044be:	e7e7      	b.n	8004490 <__sflush_r+0xd4>
 80044c0:	dfbffffe 	.word	0xdfbffffe

080044c4 <_fflush_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	690b      	ldr	r3, [r1, #16]
 80044c8:	4605      	mov	r5, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	b913      	cbnz	r3, 80044d4 <_fflush_r+0x10>
 80044ce:	2500      	movs	r5, #0
 80044d0:	4628      	mov	r0, r5
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	b118      	cbz	r0, 80044de <_fflush_r+0x1a>
 80044d6:	6a03      	ldr	r3, [r0, #32]
 80044d8:	b90b      	cbnz	r3, 80044de <_fflush_r+0x1a>
 80044da:	f7ff f8e9 	bl	80036b0 <__sinit>
 80044de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f3      	beq.n	80044ce <_fflush_r+0xa>
 80044e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80044e8:	07d0      	lsls	r0, r2, #31
 80044ea:	d404      	bmi.n	80044f6 <_fflush_r+0x32>
 80044ec:	0599      	lsls	r1, r3, #22
 80044ee:	d402      	bmi.n	80044f6 <_fflush_r+0x32>
 80044f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044f2:	f7ff fb90 	bl	8003c16 <__retarget_lock_acquire_recursive>
 80044f6:	4628      	mov	r0, r5
 80044f8:	4621      	mov	r1, r4
 80044fa:	f7ff ff5f 	bl	80043bc <__sflush_r>
 80044fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004500:	07da      	lsls	r2, r3, #31
 8004502:	4605      	mov	r5, r0
 8004504:	d4e4      	bmi.n	80044d0 <_fflush_r+0xc>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	059b      	lsls	r3, r3, #22
 800450a:	d4e1      	bmi.n	80044d0 <_fflush_r+0xc>
 800450c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800450e:	f7ff fb83 	bl	8003c18 <__retarget_lock_release_recursive>
 8004512:	e7dd      	b.n	80044d0 <_fflush_r+0xc>

08004514 <__swhatbuf_r>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	460c      	mov	r4, r1
 8004518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451c:	2900      	cmp	r1, #0
 800451e:	b096      	sub	sp, #88	@ 0x58
 8004520:	4615      	mov	r5, r2
 8004522:	461e      	mov	r6, r3
 8004524:	da0d      	bge.n	8004542 <__swhatbuf_r+0x2e>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800452c:	f04f 0100 	mov.w	r1, #0
 8004530:	bf14      	ite	ne
 8004532:	2340      	movne	r3, #64	@ 0x40
 8004534:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004538:	2000      	movs	r0, #0
 800453a:	6031      	str	r1, [r6, #0]
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	b016      	add	sp, #88	@ 0x58
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	466a      	mov	r2, sp
 8004544:	f000 f848 	bl	80045d8 <_fstat_r>
 8004548:	2800      	cmp	r0, #0
 800454a:	dbec      	blt.n	8004526 <__swhatbuf_r+0x12>
 800454c:	9901      	ldr	r1, [sp, #4]
 800454e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004552:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004556:	4259      	negs	r1, r3
 8004558:	4159      	adcs	r1, r3
 800455a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800455e:	e7eb      	b.n	8004538 <__swhatbuf_r+0x24>

08004560 <__smakebuf_r>:
 8004560:	898b      	ldrh	r3, [r1, #12]
 8004562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004564:	079d      	lsls	r5, r3, #30
 8004566:	4606      	mov	r6, r0
 8004568:	460c      	mov	r4, r1
 800456a:	d507      	bpl.n	800457c <__smakebuf_r+0x1c>
 800456c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	2301      	movs	r3, #1
 8004576:	6163      	str	r3, [r4, #20]
 8004578:	b003      	add	sp, #12
 800457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800457c:	ab01      	add	r3, sp, #4
 800457e:	466a      	mov	r2, sp
 8004580:	f7ff ffc8 	bl	8004514 <__swhatbuf_r>
 8004584:	9f00      	ldr	r7, [sp, #0]
 8004586:	4605      	mov	r5, r0
 8004588:	4639      	mov	r1, r7
 800458a:	4630      	mov	r0, r6
 800458c:	f7ff fbba 	bl	8003d04 <_malloc_r>
 8004590:	b948      	cbnz	r0, 80045a6 <__smakebuf_r+0x46>
 8004592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004596:	059a      	lsls	r2, r3, #22
 8004598:	d4ee      	bmi.n	8004578 <__smakebuf_r+0x18>
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	f043 0302 	orr.w	r3, r3, #2
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	e7e2      	b.n	800456c <__smakebuf_r+0xc>
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	6020      	str	r0, [r4, #0]
 80045aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	9b01      	ldr	r3, [sp, #4]
 80045b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045b6:	b15b      	cbz	r3, 80045d0 <__smakebuf_r+0x70>
 80045b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045bc:	4630      	mov	r0, r6
 80045be:	f000 f81d 	bl	80045fc <_isatty_r>
 80045c2:	b128      	cbz	r0, 80045d0 <__smakebuf_r+0x70>
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	431d      	orrs	r5, r3
 80045d4:	81a5      	strh	r5, [r4, #12]
 80045d6:	e7cf      	b.n	8004578 <__smakebuf_r+0x18>

080045d8 <_fstat_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4d07      	ldr	r5, [pc, #28]	@ (80045f8 <_fstat_r+0x20>)
 80045dc:	2300      	movs	r3, #0
 80045de:	4604      	mov	r4, r0
 80045e0:	4608      	mov	r0, r1
 80045e2:	4611      	mov	r1, r2
 80045e4:	602b      	str	r3, [r5, #0]
 80045e6:	f7fc f910 	bl	800080a <_fstat>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	d102      	bne.n	80045f4 <_fstat_r+0x1c>
 80045ee:	682b      	ldr	r3, [r5, #0]
 80045f0:	b103      	cbz	r3, 80045f4 <_fstat_r+0x1c>
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	bd38      	pop	{r3, r4, r5, pc}
 80045f6:	bf00      	nop
 80045f8:	200002a0 	.word	0x200002a0

080045fc <_isatty_r>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	4d06      	ldr	r5, [pc, #24]	@ (8004618 <_isatty_r+0x1c>)
 8004600:	2300      	movs	r3, #0
 8004602:	4604      	mov	r4, r0
 8004604:	4608      	mov	r0, r1
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	f7fc f90f 	bl	800082a <_isatty>
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	d102      	bne.n	8004616 <_isatty_r+0x1a>
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	b103      	cbz	r3, 8004616 <_isatty_r+0x1a>
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	200002a0 	.word	0x200002a0

0800461c <_sbrk_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4d06      	ldr	r5, [pc, #24]	@ (8004638 <_sbrk_r+0x1c>)
 8004620:	2300      	movs	r3, #0
 8004622:	4604      	mov	r4, r0
 8004624:	4608      	mov	r0, r1
 8004626:	602b      	str	r3, [r5, #0]
 8004628:	f7fc f918 	bl	800085c <_sbrk>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_sbrk_r+0x1a>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_sbrk_r+0x1a>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	200002a0 	.word	0x200002a0

0800463c <_init>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr

08004648 <_fini>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	bf00      	nop
 800464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464e:	bc08      	pop	{r3}
 8004650:	469e      	mov	lr, r3
 8004652:	4770      	bx	lr
